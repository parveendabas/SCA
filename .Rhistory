library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(mixtools)
library(plotGMM)
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(DESeq2)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
BiocManager::install("DESeq2")
rm(list=ls()) # clear workspace
library(reticulate)
use_python("/opt/anaconda3/bin/python")
use_python("/opt/anaconda3/bin/python")
use_virtualenv("/opt/anaconda3/bin/python")
#use_condaenv("/opt/anaconda3/bin/python")
py_config()
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(ggplotify)
library(scales)
library(viridis)
library(SummarizedExperiment)
library(ggpubr)
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(ggplotify)
library(scales)
library(viridis)
library(SummarizedExperiment)
library(ggpubr)
library(Seurat)
library(Biobase)
library(SingleR)
library(dplyr)
library(Matrix)
library(useful)
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(grid)
library(data.table)
library(knitr)
library(gtable)
library(matrixStats)
library(Seurat)
library(Biobase)
library(SingleR)
library(dplyr)
library(Matrix)
library(useful)
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(grid)
library(data.table)
library(knitr)
library(gtable)
library(matrixStats)
BiocManager::install("SingleR")
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(mixtools)
library(plotGMM)
library(monocle3)
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
library(monocle3)
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(DESeq2)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(futile.matrix)
library(monocle)
install.packages("futile.matrix")
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(ggpubr)
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(ggpubr)
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(DESeq2)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(futile.matrix)
## Oct 15
##Analysis of residuals
#Permutation
## two-sample equal-variances t-test:
rm(list=ls())
set.seed(1)
dat <- mtcars
dat <- dat[dat$cyl %in% c(4, 8), c('mpg', 'cyl')]
(x <- dat$mpg[dat$cyl == 4])
(y <- dat$mpg[dat$cyl == 8])
(fit <- t.test(x=x, y=y, var.equal=T))
fit$statistic
## but neither dataset is large or normally distributed:
par(mfrow=c(1, 2))
qqnorm(x, main='x')
qqline(x)
qqnorm(y, main='y')
qqline(y)
## however homogeneous enough to try permutation:
bartlett.test(mpg ~ cyl, data = dat)
## Set up permutation
R <- 9999
rslts <- rep(as.numeric(NA), R)
for(i in R){
dat.i <- dat
dat.i$cyl <- sample(dat.i$cyl, nrow(dat.i), replace = F)
x.i <- dat.i$mpg[dat.i$cyl == 4]
y.i <- dat.i$mpg[dat.i$cyl == 8]
fit.i <- t.test(x=x.i, y=y.i, var.equal = T)
rslts[i] <- fit.i$statistic
}
x                                 ## original values for 1st group
y                                 ## original values for 2d group
x.i                               ## same length as x, but values from both grps
y.i                               ## same length as y, but values from both grps
?sample
dat.i <- dat
dat.i
dat.i$cyl <- sample(dat.i$cyl, nrow(dat.i), replace = F)
dat.i$cyl
install.packages("bbot")
install.packages("boot")
library(boot)
library(devtools)
install_github("wjawaid/enrichR")
library(enrichR)
?enrichr
## https://crazyhottommy.github.io/scRNA-seq-workshop-Fall-2019/scRNAseq_workshop_3.html#gene_set_enrichment_(gsea)_analysis
## https://support.rstudio.com/hc/en-us/articles/219949047-Installing-older-versions-of-packages
rm(list=ls()) # clear workspace
### https://satijalab.org/seurat/v3.0/aml_integration_label_transfer.html
##devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
#Package Seurat version 3.0.0.9000 Index]
Sys.setenv(RETICULATE_PYTHON = "/opt/anaconda3/bin/python3")
library(reticulate)
py_config()
use_python("/opt/anaconda3/bin/python3")
use_virtualenv("~/Leiden_3.7.5")
use_condaenv("Leiden_3.7.5")
py_config()
#py_discover_config()
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
#library(harmony)
library(GSVA)
library(GSEABase)
library(GSVAdata)
library(Biobase)
library(genefilter)
library(limma)
#library('monocle')
library(cerebroApp)
library(enrichR)
library(clusterProfiler)
library(msigdbr)
library(genesorteR)
#Load Libraries
library(presto)
library(fgsea)
library(gplots)
library(MAST)
library(singleCellTK)
library(xtable)
library(scater)
library(org.Hs.eg.db)
library(mitch)
library(stringi)
library(hypeR)
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Cube/Functions_Cube_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/Human_Pancreas_Public_USE/CCA_Human_Pancreatic_NoFULLlength.BatchCorrMethods"
GO_BP_2018 <- enrichr_gsets("GO_Biological_Process_2018")
rm(list=ls()) # clear workspace
library(scTensor)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
rm(list=ls()) # clear workspace
library(scTensor)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
rm(list=ls()) # clear workspace
rm(list=ls()) # clear workspace
library(scTensor)
remotes::install_version("RSQLite", version = "2.2.5")
library(devtools)
install_github("immunogenomics/harmony")
RcppArmadillo::armadillo_version(single = F)
packageurl <- "https://cran.r-project.org/src/contrib/Archive/RcppArmadillo/RcppArmadillo_0.9.900.3.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
library(devtools)
install_github("immunogenomics/harmony")
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
rm(list=ls()) # clear workspace
library(Seurat)
library(DoubletFinder)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
#library(futile.matrix)
library(SCA)
ReInstallSCA="NO"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
}
library(SCA)
load_Packages_SeuratAnalysis()
?load_Packages_SeuratAnalysis
rm(list=ls()) # clear workspace
rm(list=ls()) # clear workspace
library(Seurat)
library(DoubletFinder)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
#library(futile.matrix)
library(SCA)
library(DoubletDecon)
library(devtools)
install_github("parveendabas/SCA")
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
rm(list=ls()) # clear workspace
library(SCA)
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
load_Packages_SeuratAnalysis()
?Read10X_Norm
