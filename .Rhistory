installed.packages("nycflights13")
install.packages("nycflights13")
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
?nycflights13
nycflights13
flights
flights
flights
view(flights)
View(flights)
flights
flights
filter(flights, year, month, day)
flights
filter(flights, month == 1, day == 1)
filter(flights, month == 1, day == 110)
filter(flights, month == 1, day == 10)
filter(flights, month == 1, day == 10)
filter(flights, month == 12, day == 25)
filter(flights, month = 12)
filter(flights, month == 12)
sqrt(2)
sqrt(2) ^ 2
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2 == 2, 2)
near(sqrt(2) ^ 2,  2)
filter(flights, month == 12 | month == 11)
filter(flights, month == 12 | month == 10)
filter(flights, month %in% c(11, 12))
filter
flights
flights
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, (arr_delay > 120 | dep_delay > 120))
NA > 5
10 == NA
NA == NA
x <- NA
y <- NA
x == y
is.na(x)
df <- tibble(x = c(1, NA, 3))
df
filter(df, x>1)
filter(df, is.na(x), x>1)
filter(df, is.na(x) | x>1)
flights
filter(flights, arr_delay >= 120)
filter(flights, arr_delay == 120)
flights
fliter(flights, dest == IAH | dest == HOU)
fliter(flights, dest == "IAH" | dest == "HOU")
filter(flights, dest == "IAH" | dest == "HOU")
flights
filter(flights, carrier %in% c("UA", "AA", "DL"))
fliter(flights, arr_delay > 120 & dep_delay <= 0)
filter(flights, arr_delay > 120 & dep_delay <= 0)
flights
arrange(flights, year, month, day)
arrange(flights, dep_delay)
arrange(flights, desc(dep_delay))
df <- tibble(x = c(5, 2, NA))
df
arrange(df, x)
arrange(df, desc(x))
df
arrange(df, x)
arrange(df, desc(x))
arrange(flights, is.na(x))
arrange(df, is.na(x))
arrange(df, desc(is.na(x)))
flights
arrange(flights, arr_time - dep_time)
flights
select(flights, year, month, day)
select(flights, year:day)
flights
select(flights, year:day)
select(flights, -(year:day))
flights
select(flights, starts_with("arr"))
select(flights, starts_with("dep"))
select(flights, ends_with("time"))
flights
select(flights, contains("hed"))
select(flights, matches("(.)\\1"))
select(flights, matches("(.)\\2"))
select(flights, matches("(.)\\1"))
flights
rename(flights, tail_num = tailnum)
flights
select(flights, time_hour, air_time, everything())
flights
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with("dep"), starts_with("arr"_delay")
select(flights, starts_with("dep"), starts_with("arr"_delay"))
select(flights, starts_with("dep"), starts_with("arr"))
values <- c("dep_time", "dep_delay", "arr_time", "arr_delay")
select(flights, values)
flights
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
flights_sml
mutate(flights_sml, gain = dep_delay - arr_delay, speed = distance / air_time * 60)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
transmute(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
49 %/% 5
49 %% 5
flights
transmute(flights,
dep_time,
hour = dep_time %/% 100,
minute = dep_time %% 100
)
summarise(flights, delay = mean(dep_delay))
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
install.packages("uwot")
py_config()
library(reticulate)
py_config()
use_python("/Users/kumarpa/anaconda3/bin/python")
use_python("/Users/kumarpa/anaconda3/bin/python")
use_virtualenv("/Users/kumarpa/anaconda3/bin/python")
use_condaenv("/Users/kumarpa/anaconda3/bin/python")
py_config()
library(reticulate)
py_config()
use_python("/opt/anaconda3/bin/python")
use_python("/opt/anaconda3/bin/python")
use_virtualenv("/opt/anaconda3/bin/python")
use_condaenv("/opt/anaconda3/bin/python")
py_config()
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("kstreet13/slingshot")
BiocManager::install("destiny")
BiocManager::install("SingleCellExperiment")
install.packages("mclust")
install.packages("gam")
devtools::install_github("hms-dbmi/pagoda2")
devtools::install_github("hms-dbmi/pagoda2")
(36*3)/129
(36*3)
rm(list=ls()) # clear workspace
library(reticulate)
use_python("/opt/anaconda3/bin/python")
use_python("/opt/anaconda3/bin/python")
use_virtualenv("/opt/anaconda3/bin/python")
py_config()
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(mixtools)
library(plotGMM)
library(monocle3)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics")
library(monocle3)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics")
?reduce_dimension
library(Seurat)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
library(mixtools)
library(plotGMM)
library(monocle3)
?reduce_dimension
?cluster_cells
?learn_graph
rm(list=ls()) # clear workspace
library(reticulate)
use_python("/opt/anaconda3/bin/python")
use_python("/opt/anaconda3/bin/python")
use_virtualenv("/opt/anaconda3/bin/python")
py_config()
library(Seurat)
BiocManager::valid()
BiocManager::install(c(
"AnnotationDbi", "arules", "BiocGenerics", "dials", "fs", "gdtools", "ggstance", "glue", "gtools", "plotly", "quantreg", "reticulate", "rsample",
"sf", "sn", "SnowballC", "StanHeaders", "tibble", "tune", "vcd", "xml2"
), update = TRUE, ask = FALSE)
BiocManager::valid()
library(Seurat)
library(scde)
install.packages("devtools")  # this command install devtools first if you don’t have devtools installed
require(devtools)
install_version("flexmix", version = "2.3-13", repos = "http://cran.us.r-project.org")
require(devtools)
devtools::install_github('hms-dbmi/scde', build_vignettes = FALSE)
devtools::install_github('hms-dbmi/scde', build_vignettes = FALSE)
download.file(url = "https://github.com/hms-dbmi/scde/archive/1.99.2.tar.gz", destfile = "1.99.2.tar.gz")
install.packages("1.99.2.tar.gz", repos = NULL, type = 'source', dependencies = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics")
Macaulay
library(monocle3)
rm(list=ls()) # clear workspace
library(monocle3)
sessionInfo()
library(SCA)
matrix.DIR <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/Mouse_RNAseq/Data_Input/MYSC23_GFP_RE/filtered_feature_bc_matrix"
?load_Packages_SeuratAnalysis
?Read10X_Norm_Mouse
?load_Packages_SeuratAnalysis
library(SCA)
?Read10X_Norm_Mouse
?load_Packages_SeuratAnalysis
79889 + 2070 + 4500
79889 + 2070 + 4500 + 7 + 38
6270 + 85
6270 + 86
library(SCA)
ReInstallSCA="NO"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
}
?load_Packages_SeuratAnalysis
?Read10X_Norm_Mouse
?Create_Table
?Filter_Genes_from_Variable_Genelist_Mouse
Filter_Genes_from_Variable_Genelist_Mouse
library(SCA)
?load_Packages_SeuratAnalysis
?Read10X_Norm_Mouse
?Create_Table
?Filter_Genes_from_Variable_Genelist_Mouse
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
load_Packages_SeuratAnalysis()
?load_Packages_SeuratAnalysis
?Read10X_Norm_Mouse
?Create_Table
?Filter_Genes_from_Variable_Genelist_Mouse
Filter_Genes_from_Variable_Genelist_Mouse
Filter_Genes_from_Variable_Genelist_Mouse()
?Filter_Genes_from_Variable_Genelist_Mouse
?SCA
library(SCA)
?Filter_Genes_from_Variable_Genelist_Mouse
library(SCA)
?load_Packages_SeuratAnalysis
?Read10X_Norm_Mouse
?Create_Table
?Filter_Genes_from_Variable_Genelist_Mouse
rm(list=ls()) # clear workspace
library(SCA)
load_Packages_SeuratAnalysis()
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
load_Packages_SeuratAnalysis()
library(SCA)
?Read10X_Norm_Mouse
rm(list=ls()) # clear workspace
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
rm(list=ls()) # clear workspace
library(SCA)
load_Packages_SeuratAnalysis()
ReInstallSCA="NO"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
load_Packages_SeuratAnalysis()
}
?load_Packages_SeuratAnalysis
?Read10X_Norm_Mouse
?Create_Table
?Filter_Genes_from_Variable_Genelist_Mouse
rm(list=ls()) # clear workspace
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
?Perform_CCA
?Perform_CCA_Diff_PCAdim_res
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_iPSC/Functions_iPSC_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/Cube_Data"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/Cube_Data/Data_Input"
OutName <- "CCA_Mouse_Pancreas_Cube"
NameInpdf="CCA_Mouse_Pancreas_Cube"
GroupName="orig.ident"
setwd(pkWD)
plotWD <- paste(getwd(),paste0(OutName),sep="/"); print(plotWD)
dir.create(file.path(getwd(),paste0(OutName)), showWarnings = FALSE)
Sampleall.object=list()
sample.Names <- c("MS20007_Pool1F10", "MS20015_Pool7_F44")
for(i in 1:length(sample.Names)){
#i=1
name=sample.Names[i]
Sample <- name; Sample
print(paste0("Processing sample ",i,": ",name, " of ",length(sample.Names)," samples"))
#sample.rds.DIR <- paste0(pkWD,"/Analyzed_Neuron_Chris_10X_",Sample); sample.rds.DIR
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
SCdata <- Read10X_Norm_Mouse(matrix.DIR, saveDIR, Sample)
genes.filter.list <- Filter_Genes_from_Variable_Genelist_Mouse(SCdata, cc = TRUE)
length(SCdata@assays$RNA@var.features)
length(intersect(SCdata@assays$RNA@var.features, genes.filter.list))
SCdata@assays$RNA@var.features <- SCdata@assays$RNA@var.features[!SCdata@assays$RNA@var.features %in% genes.filter.list]
nrow(SCdata@meta.data)
length(SCdata@assays$RNA@var.features)
Sampleall.object[[i]] <- SCdata
print(paste0("Completed sample ",i,": ",name, " of ",length(sample.Names)," samples"))
## RUN bracket
}
library(SCA)
load_Packages_SeuratAnalysis()
load_Packages_SeuratAnalysis()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_iPSC/Functions_iPSC_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/Cube_Data"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/Cube_Data/Data_Input"
OutName <- "CCA_Mouse_Pancreas_Cube"
NameInpdf="CCA_Mouse_Pancreas_Cube"
GroupName="orig.ident"
setwd(pkWD)
plotWD <- paste(getwd(),paste0(OutName),sep="/"); print(plotWD)
dir.create(file.path(getwd(),paste0(OutName)), showWarnings = FALSE)
Sampleall.object=list()
sample.Names <- c("MS20007_Pool1F10", "MS20015_Pool7_F44")
for(i in 1:length(sample.Names)){
#i=1
name=sample.Names[i]
Sample <- name; Sample
print(paste0("Processing sample ",i,": ",name, " of ",length(sample.Names)," samples"))
#sample.rds.DIR <- paste0(pkWD,"/Analyzed_Neuron_Chris_10X_",Sample); sample.rds.DIR
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
SCdata <- Read10X_Norm_Mouse(matrix.DIR, saveDIR, Sample)
genes.filter.list <- Filter_Genes_from_Variable_Genelist_Mouse(SCdata, cc = TRUE)
length(SCdata@assays$RNA@var.features)
length(intersect(SCdata@assays$RNA@var.features, genes.filter.list))
SCdata@assays$RNA@var.features <- SCdata@assays$RNA@var.features[!SCdata@assays$RNA@var.features %in% genes.filter.list]
nrow(SCdata@meta.data)
length(SCdata@assays$RNA@var.features)
Sampleall.object[[i]] <- SCdata
print(paste0("Completed sample ",i,": ",name, " of ",length(sample.Names)," samples"))
## RUN bracket
}
RUNanchor="YES"
if(RUNanchor=="YES"){
setwd(plotWD)
saveDIR <- plotWD
#sample.integrated <- Perform_CCA(Sampleall.object, saveDIR, NameInpdf)
sample.integrated <- Perform_CCA(Sampleall.object[][1:2], NameInpdf, saveDIR)
Perform_CCA_Diff_PCAdim_res(Sampleall.object, NameInpdf, saveDIR, save = FALSE, TempCCAdimchosenlist=c(20))
##RUNanchor bracket
}
print(ElbowPlot(sample.integrated, ndims = 30) + ggtitle(paste((unlist(TempCCAdimchosenlist)), collapse=",")))
#' A Perform_CCA_Diff_PCAdim_res Function
#'
#' This function allows you to express your love of cats.
#' @param Sampleall.object A list of Seurat objects between which to find anchors for downstream integration.
#' @param NameInpdf Path to save Quality plots and RDS data.
#' @param saveDIR Suffix to be added to CCA files.
#' @param FeatureUseCount A numeric value. This will call SelectIntegrationFeatures to select the provided number of features to be used in anchor finding
#' @param plots Save CCA plots
#' @param save Save integrated CCA RDS Seurat object
#' @keywords Sampleall.object, NameInpdf, saveDIR, FeatureUseCount, TempCCAdimchosen, res, plots, save
#' @export
#' @examples
#' Perform_CCA_Diff_PCAdim_res()
Perform_CCA_Diff_PCAdim_res <- function(Sampleall.object, NameInpdf, saveDIR, TempCCAdimchosenlist=c(15, 20, 30), FeatureUseCount=2500, plots = TRUE, save = FALSE){
TempAll.object=Sampleall.object
print(paste0("Performing CCA for ",length(TempAll.object)," Objects"))
pdf(file=paste0("Plots_CCA_",Sample,"_Different_PCs_and_Resolutions.pdf"),height = 16,width = 18)
print(ElbowPlot(sample.integrated, ndims = 30) + ggtitle(paste((unlist(TempCCAdimchosenlist)), collapse=",")))
for(TempCCAdimchosen in TempCCAdimchosenlist){
#TempCCAdimchosen=20
print(paste0("Processing for Temp PCA ",TempCCAdimchosen))
reference.list <- c(TempAll.object)
print(paste0("Finding IntegrationAnchors"))
sample.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:TempCCAdimchosen, anchor.features = FeatureUseCount)
## We then pass these anchors to the IntegrateData function, which returns a Seurat object.
## The returned object will contain a new Assay, which holds an integrated (or ‘batch-corrected’) expression matrix for all cells, enabling them to be jointly analyzed.
print(paste0("Integrating Data"))
sample.integrated <- IntegrateData(anchorset = sample.anchors, dims = 1:TempCCAdimchosen)
##After running IntegrateData, the Seurat object will contain a new Assay with the integrated expression matrix. Note that the original (uncorrected values)
## are still stored in the object in the “RNA” assay, so you can switch back and forth.
#saveRDS(object = sample.integrated, file = paste0(NameInpdf,".rds"))
## We can then use this new integrated matrix for downstream analysis and visualization. Here we scale the integrated data, run PCA, and visualize the results with UMAP.
## The integrated datasets cluster by cell type, instead of by technology.
# switch to integrated assay. The variable features of this assay are automatically set during
# IntegrateData
DefaultAssay(object = sample.integrated) <- "integrated"
# Run the standard workflow for visualization and clustering
sample.integrated <- ScaleData(object = sample.integrated, verbose = FALSE)
sample.integrated <- RunPCA(object = sample.integrated, npcs = TempCCAdimchosen, verbose = FALSE)
sample.integrated <- RunUMAP(object = sample.integrated, reduction = "pca", dims = 1:TempCCAdimchosen)
setwd(saveDIR)
p=q=list()
Tempreslist=c("0.1", "0.2", "0.3", "0.5", "0.8")
for(Tempres in Tempreslist){
#for(Tempres in c("0.1", "0.2", "0.3")){
#Tempres="0.1"
print(paste0("Processing for Temp resolution ",Tempres))
sample.integrated <- FindNeighbors(sample.integrated, dims = 1:TempCCAdimchosen)
sample.integrated <- FindClusters(sample.integrated, resolution = as.numeric(Tempres))
if (plots == TRUE) {
print(paste0("Generating different resolution plots for PCA ",TempCCAdimchosen))
p[[Tempres]]  <- DimPlot(sample.integrated, reduction = "umap", group.by = "seurat_clusters")
q[[Tempres]]  <- DimPlot(sample.integrated, reduction = "umap", group.by = GroupName)
#print(plot_grid(p1, p2, NULL, NULL, nrow = 2))
}
}
print(plot_grid(q[["0.1"]]))
#print(plot_grid(p[["0.1"]], p[["0.2"]], p[["0.3"]], p[["0.4"]], p[["0.5"]], p[["0.6"]], p[["0.7"]], p[["0.8"]], p[["0.9"]], ncol = 3),
blank <- ggplot() + theme_bw() + ggtitle(paste0("PCs ",TempCCAdimchosen)) + theme(plot.title = element_text(size=50, colour = "red"))
print(plot_grid(p[["0.1"]], p[["0.2"]], p[["0.3"]], p[["0.5"]], p[["0.8"]], blank, ncol = 3, labels=c("0.1", "0.2", "0.3", "0.5", "0.8")))
dev.off()
if (save == TRUE) {
print("Saving Seurat RDS object and meta data")
setwd(saveDIR)
write.table(sample.integrated@meta.data,file=paste0("Meta_Data_",NameInpdf,".txt"),quote=F,sep="\t")
saveRDS(object = sample.integrated, file = paste0(NameInpdf,"_PCA",TempCCAdimchosen,".rds"))
}
}
print("Done")
print(Sys.time())
}
Perform_CCA_Diff_PCAdim_res(Sampleall.object, NameInpdf, saveDIR, save = FALSE, TempCCAdimchosenlist=c(20))
dev.off()
dev.off()
rm(list=ls()) # clear workspace
library("devtools")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
