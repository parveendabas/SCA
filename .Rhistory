library(gridBase)
library(ggrepel)
library(calibrate)
library(mixtools)
library(plotGMM)
#library(monocle3)
library(VariantAnnotation)
library(vcfR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
py_config()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
#Custom.Cluster = c(`Cluster01` = "#0000ee", `Cluster02` = "#27408B", `Cluster03` = "#56B4E9",  `Cluster14` = "#00ffff", `Cluster04` = "#00ff00", `Cluster05` = "#DEB887", `Cluster06` = "#008000", `Cluster07` = "#bf3eff", `Cluster08` = "#ff0000", `Cluster09` = "#8b0000", `Cluster10` = "#CD5C5C", `Cluster11` = "#ff80bf", `Cluster12` = "#F0E442", `Cluster13` = "#ffff00"),
ClusOrder.main <- c("Cluster01", "Cluster02", "Cluster03", "Cluster14", "Cluster04", "Cluster05", "Cluster06", "Cluster07", "Cluster08", "Cluster09", "Cluster10", "Cluster11", "Cluster12", "Cluster13"); ClusOrder.main
cbPalette.Cluster <- c("#0000ee", "#27408B", "#56B4E9", "#00ffff", "#00ff00", "#DEB887", "#008000", "#bf3eff", "#ff0000", "#8b0000", "#CD5C5C", "#ff80bf", "#F0E442", "#ffff00")
TClusOrder <- c("1", "2", "3", "4", "5", "6", "7", "8", "9"); TClusOrder
TClusOrderPalette <- c("#00ff00", "#DEB887", "#00ffff", "#008000", "#bf3eff", "#F0E442", "#ffff00", "#ff8c00", "#ff34b3")
FragOrder = c("Yun.LPD.6", "Yun.LPD.7","Yun.LPD.8", "Yun.LPD.11", "Yun.LPD.12", "Yun.LPD.14", "Yun.LPD.15", "Yun.LPD.1", "Yun.LPD.3", "Yun.LPD.4", "Yun.LPD.5")
FragPalette <- c("#00008b", "#87ceff", "#009acd", "#0000ee", "#cd5b45", "#ff7f50", "#ff0000", "#8b0000", "#cdad00", "#FFD700", "#eee685", "#FFFF00", "#008b00", "#00ff00", "#6b8e23", "#20B2AA")
keywordList=c("Step4_Fil_HighOnly", "Step3_Fil_ModandHigh")
#keywordList=c("Step3_Fil_ModandHigh")
for(keyword in keywordList){
#keyword="Step3_Fil_ModandHigh"
print(paste0("Processing keyword: ",keyword))
for(Patient in c("Yun.LPD")){
#Patient="Yun.LPD"
print(paste0("Processing Patient: ",Patient))
pkWD <- paste0("/Users/kumarpa/Desktop/Work/Jax/Kyuson/LDE_Project_Mouse/Mouse_Exome/Mutation_Calling/Annotated_VCF_Universal_20_Sample/VCF_Processing_",Patient)
setwd(pkWD)
files = dir(path = pkWD, pattern = paste0("*",keyword,".*txt$"), full.names = T, recursive = T); files
files <- files[!files %like% "Combined"]; files
#for(IdentToSubset in GroupOrder.temp){
VCF.object=list();
for(i in 1:length(files)){
#i=2
fv=files[i];
sample=gsub("Processed_","",basename(fv)); sample
sample=gsub("_GRCm38_PASS.*","",sample); sample
print(paste0("Processing VCF: ",basename(fv)))
filefv <- read.table(file = fv, sep = "\t", header = TRUE, as.is = TRUE, check.names = F, quote = "", fill = FALSE); print(head(filefv)); dim(filefv)
#filefv.pass.df <- filefv.pass.df[,c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "Annotation", "Annotation_Impact", "Gene_Name", "Gene_ID", "Feature_Type", "Feature_ID", "Transcript_BioType", "HGVS.c", "HGVS.p", paste0(sample), paste0("Norm",sample), paste0("GT_",sample), paste0("AD_",sample), paste0("AF_",sample),  paste0("GT_Norm",sample), paste0("AD_Norm",sample), paste0("AF_Norm",sample))]
head(filefv[,c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact", paste0("GT_",sample), paste0("AD_",sample), paste0("GT_Norm",sample), paste0("AD_Norm",sample))])
VCF.object[[i]] <- filefv[,c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact", paste0("GT_",sample), paste0("AD_",sample), paste0("GT_Norm",sample), paste0("AD_Norm",sample))]
}
#Patient Bracket
RUNplot="YES"
if(RUNplot=="YES"){
head(VCF.object[[i]])
RUNthis="YES"
if(RUNthis=="YES"){
file1 <- (VCF.object[[1]]); head(file1); dim(file1)
file2 <- (VCF.object[[2]]); head(file2); dim(file2)
file3 <- (VCF.object[[3]]); head(file3); dim(file3)
file4 <- (VCF.object[[4]]); head(file4); dim(file4)
file5 <- (VCF.object[[5]]); head(file5); dim(file5)
file6 <- (VCF.object[[6]]); head(file6); dim(file6)
file7 <- (VCF.object[[7]]); head(file7); dim(file7)
file8 <- (VCF.object[[8]]); head(file8); dim(file8)
file9 <- (VCF.object[[9]]); head(file9); dim(file9)
file10 <- (VCF.object[[10]]); head(file10); dim(file10)
file11 <- (VCF.object[[11]]); head(file11); dim(file11)
CommonData12 <- merge(file1, file2, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData12); dim(CommonData12)
CommonData34 <- merge(file3, file4, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData34); dim(CommonData34)
CommonData56 <- merge(file5, file6, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData56); dim(CommonData56)
CommonData78 <- merge(file7, file8, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData78); dim(CommonData78)
CommonData910 <- merge(file9, file10, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData910); dim(CommonData910)
CommonData91011 <- merge(CommonData910, file11, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData91011); dim(CommonData91011)
CommonData1234 <- merge(CommonData12, CommonData34, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData1234); dim(CommonData1234)
CommonData5678 <- merge(CommonData56, CommonData78, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData5678); dim(CommonData5678)
CommonData12345678 <- merge(CommonData1234, CommonData5678, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData12345678); dim(CommonData12345678)
CommonData1234567891011 <- merge(CommonData12345678, CommonData91011, by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData1234567891011); dim(CommonData1234567891011)
}
Temp <- VCF.object[[1]]
for(i in 2:length(VCF.object)){
#i=2
print(paste0("Processing file num:",i))
CommonData <- merge(Temp, VCF.object[[i]], by=c("CHROM", "POS", "REF", "ALT", "Gene_Name", "Transcript_BioType", "Annotation", "HGVS.c", "HGVS.p","Annotation_Impact"), all=TRUE); head(CommonData); print(dim(CommonData))
Temp=CommonData
}
Mutation.df.temp <- CommonData; head(Mutation.df.temp); dim(Mutation.df.temp)
write.table(Mutation.df.temp,file=paste0("Processed_Combined_",Patient,"_GRCm38_",keyword,"_",nrow(Mutation.df.temp),".txt"),row.names=F,quote=F,sep="\t")
Cols.Kyuson <- colnames(Mutation.df.temp); Cols.Kyuson
Cols.Kyuson <- Cols.Kyuson[!Cols.Kyuson %like% "Norm"]; Cols.Kyuson
Cols.Kyuson <- Cols.Kyuson[!Cols.Kyuson %like% "AD_"]; Cols.Kyuson
Temp.Kyuson <- Mutation.df.temp[,Cols.Kyuson]
Temp.Kyuson[is.na(Temp.Kyuson)] <- "-"
head(Temp.Kyuson); dim(Mutation.df.temp)
write.table(Temp.Kyuson,file=paste0("Processed_Combined_",Patient,"_GRCm38_",keyword,"_",nrow(Mutation.df.temp),"_SendKyuson.txt"),row.names=F,quote=F,sep="\t")
#write.table(CommonData1234567891011,file=paste0("Check_Processed_Combined_",Patient,"_GRCm38_",keyword,"_",nrow(Mutation.df.temp),".txt"),row.names=F,quote=F,sep="\t")
Mutation.df.ALL <- Mutation.df.temp
Mutation.df.ALL <- Mutation.df.ALL[!duplicated(Mutation.df.ALL[,c("Gene_Name","HGVS.p")]),]; dim(Mutation.df.ALL)
rownames(Mutation.df.ALL) <- paste0(Mutation.df.ALL$Gene_Name,"_",Mutation.df.ALL$HGVS.p)
RemoveAD <- colnames(Mutation.df.ALL)[colnames(Mutation.df.ALL) %like% "AD_"]
Mutation.df.ALL <- Mutation.df.ALL[,!colnames(Mutation.df.ALL) %in% RemoveAD]
Mutation.df.ALL <- subset(Mutation.df.ALL,select = -c(CHROM, POS, REF, ALT, Gene_Name, Transcript_BioType ,Annotation_Impact, Annotation, HGVS.c, HGVS.p)); head(Mutation.df.ALL)
head(Mutation.df.ALL)
NormCols <- colnames(Mutation.df.ALL)[colnames(Mutation.df.ALL) %like% "Norm"]; NormCols
TumorCols <- colnames(Mutation.df.ALL)[!colnames(Mutation.df.ALL) %like% "Norm"]; TumorCols
Mutation.df.ALL <- Mutation.df.ALL[,c(TumorCols)]
Mutation.Heatmap <- Mutation.df.ALL; head(Mutation.Heatmap)
Mutation.Heatmap[is.na(Mutation.Heatmap)] <- "0"
Mutation.Heatmap <- data.frame(lapply(Mutation.Heatmap, function(x) {gsub("0/0", "0", x)}))
Mutation.Heatmap <- data.frame(lapply(Mutation.Heatmap, function(x) {gsub("1/1", "1", x)}))
Mutation.Heatmap <- data.frame(lapply(Mutation.Heatmap, function(x) {gsub("0/1", "1", x)}))
head(Mutation.Heatmap)
indx <- sapply(Mutation.Heatmap, is.factor)
Mutation.Heatmap[indx] <- lapply(Mutation.Heatmap[indx], function(x) as.numeric(as.character(x)))
#Mutation.Heatmap <- data.matrix(Mutation.df.ALL); head(Mutation.Heatmap)
rownames(Mutation.Heatmap) <- rownames(Mutation.df.ALL)
head(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("^GT_","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("_1$","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
#colnames(Mutation.Heatmap) <- gsub("\\.","-",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("Yun-LPD_","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("_L4.*$","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("_L3.*$","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap)
#colors <- c(seq(-1,1,by=1),max(Mutation.Heatmap))
##colors <- c(seq(-2,(max(MatPagVarinfo$mat[genes,])-1),by=0.01),max(MatPagVarinfo$mat[genes,]))
#my_palette <- c(colorRampPalette(colors = c("#e6edf7", "gray98", "darksalmon", "darkred")) (n = length(colors)-1), "firebrick4")
#print(pheatmap(Mutation.Heatmap, cluster_rows = FALSE, cluster_cols = FALSE,
#               main = paste0("Patient ",Patient,": ",nrow(Mutation.Heatmap), " Mutations"), color=my_palette, breaks=colors),
#      fontsize = 13)
## change the levels for gene names and sample names so it goes 1,2,3,4... rather than 1, 10...
Mutation.Heatmap$gene <- rownames(Mutation.Heatmap)
Mutation.Heatmap.melt <- melt(Mutation.Heatmap, id.vars = "gene")
mut.tidy <- Mutation.Heatmap.melt; dim(mut.tidy)
#mut.tidy <- mut.tidy[!duplicated(mut.tidy$gene),]; dim(mut.tidy)
#mut.tidy<- mut %>% tidyr::gather(CNSTM, mutated, 1:4)
#mut.tidy$gene<- factor(mut.tidy$gene, levels = mut.tidy$gene)
mut.tidy$variable<- factor(mut.tidy$variable, levels = FragOrder[FragOrder %in% unique(mut.tidy$variable)]); head(mut.tidy)
mut.tidy$value <- as.character(mut.tidy$value)
setwd(pkWD)
if(keyword=="Step4_Fil_HighOnly"){
print(paste0("keywordList: ",keyword))
print("Using Smaller Size")
Sys.sleep(5)
pdf(file=paste0("Combined_Heatmap_Mutations_Patient",Patient,"_GRCm38_",keyword,"_",nrow(Mutation.df.temp),".pdf"),height = 6,width = 8)
} else if(keyword=="Step3_Fil_ModandHigh"){
print(paste0("keywordList: ",keyword))
print("Using Larger Size")
Sys.sleep(5)
pdf(file=paste0("Combined_Heatmap_Mutations_Patient",Patient,"_GRCm38_",keyword,"_",nrow(Mutation.df.temp),".pdf"),height = 26,width = 12)
}
print(ggplot(mut.tidy, aes(x=variable, y=gene, fill=value)) + geom_tile(color="white", size=0.5) +
#coord_equal() +
labs(x=NULL, y=NULL, title="Mutation spectrum") +
theme_tufte(base_family="Helvetica") +
#scale_fill_manual(values = c("#7570b3", "#1b9e77")) +
scale_fill_manual(values = c("gray", "red")) +
scale_fill_brewer(palette = "Set1", direction = -1) +
theme(axis.ticks=element_blank(), plot.title = element_text(size = 16, face = "bold"),
legend.title=element_text(size=16),
legend.text=element_text(size=16)) +
labs(fill = "Mutation") +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size = 16),
axis.text.y=element_text(hjust = 1, size = 12)))
dev.off()
mut.tidy.ori <- mut.tidy
chrlist <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19")
pdf(file=paste0("Heatmap_Mutations_Patient",Patient,"_GRCm38_",keyword,"_",nrow(Mutation.df.temp),".pdf"),height = 10,width = 11)
for(chr in chrlist){
#chr="chr1"
print(paste0("Processing chr:",chr))
Mutation.df <- Mutation.df.temp[Mutation.df.temp$CHROM == chr,]; head(Mutation.df); dim(Mutation.df)
if(nrow(Mutation.df) > 1){
Mutation.df <- Mutation.df[!duplicated(Mutation.df[,c("Gene_Name","HGVS.p")]),]; dim(Mutation.df)
rownames(Mutation.df) <- paste0(Mutation.df$Gene_Name,"_",Mutation.df$HGVS.p)
RemoveAD <- colnames(Mutation.df)[colnames(Mutation.df) %like% "AD_"]
Mutation.df <- Mutation.df[,!colnames(Mutation.df) %in% RemoveAD]
Mutation.df <- subset(Mutation.df,select = -c(CHROM, POS, REF, ALT, Gene_Name, Transcript_BioType ,Annotation_Impact, Annotation, HGVS.c, HGVS.p)); head(Mutation.df)
head(Mutation.df)
NormCols <- colnames(Mutation.df)[colnames(Mutation.df) %like% "Norm"]; NormCols
TumorCols <- colnames(Mutation.df)[!colnames(Mutation.df) %like% "Norm"]; TumorCols
Mutation.df <- Mutation.df[,c(TumorCols)]
Mutation.Heatmap <- Mutation.df; head(Mutation.Heatmap)
Mutation.Heatmap[is.na(Mutation.Heatmap)] <- "0"
Mutation.Heatmap <- data.frame(lapply(Mutation.Heatmap, function(x) {gsub("0/0", "0", x)}))
Mutation.Heatmap <- data.frame(lapply(Mutation.Heatmap, function(x) {gsub("1/1", "1", x)}))
Mutation.Heatmap <- data.frame(lapply(Mutation.Heatmap, function(x) {gsub("0/1", "1", x)}))
head(Mutation.Heatmap)
indx <- sapply(Mutation.Heatmap, is.factor)
Mutation.Heatmap[indx] <- lapply(Mutation.Heatmap[indx], function(x) as.numeric(as.character(x)))
#Mutation.Heatmap <- data.matrix(Mutation.df.ALL); head(Mutation.Heatmap)
rownames(Mutation.Heatmap) <- rownames(Mutation.df)
head(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("^GT_","",colnames(Mutation.Heatmap))
colnames(Mutation.Heatmap) <- gsub("_1$","",colnames(Mutation.Heatmap))
#colnames(Mutation.Heatmap) <- gsub("\\.","-",colnames(Mutation.Heatmap))
colnames(Mutation.Heatmap) <- gsub("Yun-LPD_","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("_L4.*$","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap) <- gsub("_L3.*$","",colnames(Mutation.Heatmap)); colnames(Mutation.Heatmap)
colnames(Mutation.Heatmap)
#colors <- c(seq(-1,1,by=1),max(Mutation.Heatmap))
##colors <- c(seq(-2,(max(MatPagVarinfo$mat[genes,])-1),by=0.01),max(MatPagVarinfo$mat[genes,]))
#my_palette <- c(colorRampPalette(colors = c("#e6edf7", "gray98", "darksalmon", "darkred")) (n = length(colors)-1), "firebrick4")
#print(pheatmap(Mutation.Heatmap, cluster_rows = FALSE, cluster_cols = FALSE,
#               main = paste0("Patient ",Patient,": ",nrow(Mutation.Heatmap), " Mutations"), color=my_palette, breaks=colors),
#      fontsize = 13)
## change the levels for gene names and sample names so it goes 1,2,3,4... rather than 1, 10...
Mutation.Heatmap$gene <- rownames(Mutation.Heatmap)
Mutation.Heatmap.melt <- melt(Mutation.Heatmap, id.vars = "gene")
mut.tidy <- Mutation.Heatmap.melt; dim(mut.tidy)
#mut.tidy <- mut.tidy[!duplicated(mut.tidy$gene),]; dim(mut.tidy)
#mut.tidy<- mut %>% tidyr::gather(CNSTM, mutated, 1:4)
#mut.tidy$gene<- factor(mut.tidy$gene, levels = mut.tidy$gene)
mut.tidy$variable<- factor(mut.tidy$variable, levels = FragOrder[FragOrder %in% unique(mut.tidy$variable)])
mut.tidy$value <- as.character(mut.tidy$value)
print(ggplot(mut.tidy, aes(x=variable, y=gene, fill=value)) + geom_tile(color="white", size=0.5) +
#        coord_equal() +
labs(x=NULL, y=NULL, title="Mutation spectrum, Chromosome Wise") +
theme_tufte(base_family="Helvetica") +
#scale_fill_manual(values = c("#7570b3", "#1b9e77")) +
scale_fill_manual(values = c("gray", "red")) +
scale_fill_brewer(palette = "Set1", direction = -1) +
theme(axis.ticks=element_blank()) +
labs(fill = "Mutation") +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size = 15),
axis.text.y=element_text(hjust = 1, size = 15)))
}
}
dev.off()
}
}
}
rm(list=ls()) # clear workspace
library(Seurat)
library(Matrix)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(tidyr)
library(pheatmap)
library(tidyverse)
library(dplyr)
library(gridBase)
library(ggrepel)
library(ggplotify)
library(viridis)
library(SummarizedExperiment)
GroupName <- "Patient"
ClusterGroup <- "PatientALL"
RDSname <- paste0("Seurat_Formatted_Normalized_USE_GBM_",ClusterGroup)
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/Manuscript_Draft"
RDSdir <- paste0("/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/Data_Input/",ClusterGroup)
ColToUse <- "Custom.Cluster"
Suffix <- "PatientALL"
## Change Figure1 as well
NameInPdf.main <- paste0(ColToUse,"_Based_",Suffix)
IdentToSubsetColName="Custom.Cluster"
IdentToSubset="NA"
downsampleHeatmap=25000
FDR=0.1
FoldChangeCutoff=1.4
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_GBMatlas.R")
setwd(pkWD)
plotWD <- paste(getwd(),paste0("For_Github_Main_Figures"),sep="/"); print(plotWD)
dir.create(file.path(getwd(),paste0("For_Github_Main_Figures")), showWarnings = FALSE)
setwd(plotWD)
plotWD1 <- paste(getwd(),paste0("Figure1_",Suffix),sep="/"); print(plotWD1)
dir.create(file.path(getwd(),paste0("Figure1_",Suffix)), showWarnings = FALSE)
#Custom.Cluster = c(`Cluster01` = "#0000ee", `Cluster02` = "#27408B", `Cluster03` = "#56B4E9",  `Cluster14` = "#00ffff", `Cluster04` = "#00ff00", `Cluster05` = "#DEB887", `Cluster06` = "#008000", `Cluster07` = "#bf3eff", `Cluster08` = "#ff0000", `Cluster09` = "#8b0000", `Cluster10` = "#CD5C5C", `Cluster11` = "#ff80bf", `Cluster12` = "#F0E442", `Cluster13` = "#ffff00"),
ClusOrder.main <- c("Cluster01", "Cluster02", "Cluster03", "Cluster04", "Cluster05", "Cluster06", "Cluster07", "Cluster08", "Cluster09", "Cluster10", "Cluster11", "Cluster12", "Cluster13", "Cluster14"); ClusOrder.main
ClusOrder <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"); ClusOrder
cbPalette.Cluster <- c("darkblue", "#0073ff" ,"#009FFF" ,"#00EEFF", "#FF0073", "#FF00D3" ,"#C900FF" ,"#FF8C00" ,"#FF5900", "#FF2500" ,"darkred" ,"#5FFF00", "#AFFF00" ,"#FFFF00")
#, "#CAFF70", "#b5d4ff", "#000000", "#787878", "#999999", "#D3D3D3"
# Has 20 colors cbPalette.Cluster <- c("#0000ee", "#27408B", "#56B4E9", "#ff0000", "#CD5C5C", "#DEB887", "#008000", "#E69F00", "#00ffff", "#F0E442", "#bf3eff", "#00ff00", "#ff80bf", "#ffff00", "#CAFF70", "#b5d4ff", "#000000", "#787878", "#999999", "#D3D3D3")
#cbPalette.CT <- c("#0000ee", "#ff0000", "#008000", "#E69F00", "#00ffff", "#F0E442", "#bf3eff", "#00ff00", "#ff80bf", "#00EE00", "#FF0000", "#787878", "#999999", "#D3D3D3", "#e066ff", "#b452cd")
#cbPalette.CT <- c("#00008b", "#87ceff", "#009acd", "#8470ff", "#cd5b45", "#ff7f50", "#ff0000", "#8b0000", "#cdad00", "#FFD700", "#eee685", "#FFFF00", "#008b00", "#00ff00", "#6b8e23", "#20B2AA")
CTOrder <- c("Glioma", "Pericyte", "Tcells", "Myeloid", "Oligo", "Mix"); CTOrder
cbPalette.CT <- c("darkblue", "#FF00D3", "#C900FF", "darkred", "#5FFF00", "grey")
GroupOrder.temp = c("CNSTM-068", "CNSTM-070", "CNSTM-081", "CNSTM-096")
GroupPalette.temp <- c("#0039d1","#c20f00","purple","#26cc00")
FragOrder = c("CNSTM-068-A", "CNSTM-068-B", "CNSTM-068-C", "CNSTM-068-D", "CNSTM-070-A", "CNSTM-070-C", "CNSTM-070-D", "CNSTM-070-F", "CNSTM-081-A", "CNSTM-081-B", "CNSTM-081-C", "CNSTM-081-D", "CNSTM-096-1", "CNSTM-096-2", "CNSTM-096-4", "CNSTM-096-5")
FragPalette <- c("#0000FF", "#0045FF", "#008AFF" ,"#00CFFF", "#FF9A00", "#FF6E00", "#FF1400" ,"darkred" ,"#FF0052", "#FF00A6", "#FF00F9" ,"#B000FF","darkgreen","#30FF00","#B9FF00", "#FFFF00")
PredictionOrder <- c("diploid", "aneuploid")
PredictionPalette <- c("#ff7f50", "#009FFF")
setwd(RDSdir)
FullInfo <- read.table(file = paste0("Full_Information_",ClusterGroup,"_Cells.txt"), header = T, sep = "\t"); head(FullInfo); dim(FullInfo)
setwd(RDSdir)
SCdata.main <- readRDS(paste0(RDSname,".rds"))
SCdata.main
head(SCdata.main@meta.data)
dim(GetAssayData(object = SCdata.main, slot = "scale.data"))
SCdata.main$Custom.Cluster <- gsub(" ", "",SCdata.main$Custom.Cluster)
SCdata.main$prediction <- gsub("tumor", "aneuploid",SCdata.main$prediction)
SCdata.main$prediction <- gsub("normal", "diploid",SCdata.main$prediction)
SCdata.main$prediction <- factor(SCdata.main$prediction, levels = PredictionOrder)
Idents(SCdata.main) <- ColToUse
DefaultAssay(SCdata.main) <- "RNA"
table(SCdata.main@meta.data$Patient)
table(SCdata.main@meta.data$Fragment)
RDSdir
ClusterGroup
rm(list=ls()) # clear workspace
library(SCA)
ReInstallSCA="NO"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
}
library(SCA)
load_Packages_SeuratAnalysis()
?Read10X_Norm
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_Batch_V5_Cellranger/Batch1/Human Data 2021-selected"
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_Batch_V5_Cellranger/Batch1/Human_Data_GBM_Batch1"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_Batch_V5_Cellranger/Batch1/Human_Data_GBM_Batch1/Data_Input"
#RDSdir <- paste0("/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/2016 Yanai Cell Systems/GSE84133_RAW/Human/Human_Pancreas/Data_Input/Human_Pancreas")
#RDSname <- "Only_Raw_Human_Pancreas"
OutName <- "GBM_Batch1"
NameInpdf="GBM_Batch1"
GroupName="orig.ident"
## Paremeter that needed to changed based on projects
mincells = 3
mingenes = 500
mtpercent = 20
rbpercent = 50
featureForCCA=2000
CCAdimension=30
Sampleall.object=list()
#sample.Names <- c("MYSC44", "MYSC46", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60", "MYSC45", "MYSC47")
sample.Names <- c("CNSTM-068-A", "CNSTM-068-B", "CNSTM-068-C", "CNSTM-068-D", "CNSTM-070-A", "CNSTM-070-C", "CNSTM-070-D", "CNSTM-070-F", "CNSTM-081-A", "CNSTM-081-B", "CNSTM-081-C", "CNSTM-081-D", "CNSTM-096-1", "CNSTM-096-2", "CNSTM-096-4", "CNSTM-096-5")
PreProcess="YES"
print(paste0("Pre-processing the data"))
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
i=3
i=10
#i=10
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
print(paste0("Removing Doublet Cells for ",Sample))
Read10X_RemoveDoublets_Norm(matrix.DIR, saveDIR, Sample, Doublet.DIR, FeatureUseCount = 2000)
PreProcess="YES"
if(PreProcess=="YES"){
print(paste0("Pre-processing the data"))
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
for(i in 1:length(sample.Names)){
#i=10
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
print(paste0("Removing Doublet Cells for ",Sample))
Read10X_RemoveDoublets_Norm(matrix.DIR, saveDIR, Sample, Doublet.DIR, FeatureUseCount = 2000)
}
}
Sample
dev.off()
dev.off()
## https://github.com/satijalab/seurat/issues/398
## https://github.com/satijalab/seurat/issues/462
## print(.libPaths())
## print(sessionInfo())
## print(version)
rm(list=ls()) # clear workspace
### https://satijalab.org/seurat/v3.0/aml_integration_label_transfer.html
##devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
#Package Seurat version 3.0.0.9000 Index]
library(SCA)
ReInstallSCA="NO"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
}
library(SCA)
load_Packages_SeuratAnalysis()
?Read10X_Norm
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_Batch_V5_Cellranger/Batch1/Human_Data_GBM_Batch1"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_Batch_V5_Cellranger/Batch1/Human_Data_GBM_Batch1/Data_Input"
#RDSdir <- paste0("/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/2016 Yanai Cell Systems/GSE84133_RAW/Human/Human_Pancreas/Data_Input/Human_Pancreas")
#RDSname <- "Only_Raw_Human_Pancreas"
OutName <- "GBM_Batch1"
NameInpdf="GBM_Batch1"
GroupName="orig.ident"
## Paremeter that needed to changed based on projects
mincells = 3
mingenes = 500
mtpercent = 20
rbpercent = 50
featureForCCA=2000
CCAdimension=30
Sampleall.object=list()
#sample.Names <- c("MYSC44", "MYSC46", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60", "MYSC45", "MYSC47")
#sample.Names <- c("CNSTM-068-A", "CNSTM-068-B", "CNSTM-068-C", "CNSTM-068-D", "CNSTM-070-A", "CNSTM-070-C", "CNSTM-070-D", "CNSTM-070-F", "CNSTM-081-A", "CNSTM-081-B", "CNSTM-081-C", "CNSTM-081-D", "CNSTM-096-1", "CNSTM-096-2", "CNSTM-096-4", "CNSTM-096-5")
sample.Names <- c("CNSTM-096-1", "CNSTM-096-2", "CNSTM-096-4", "CNSTM-096-5")
PreProcess="YES"
if(PreProcess=="YES"){
print(paste0("Pre-processing the data"))
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
for(i in 1:length(sample.Names)){
#i=10
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
print(paste0("Removing Doublet Cells for ",Sample))
Read10X_RemoveDoublets_Norm(matrix.DIR, saveDIR, Sample, Doublet.DIR, FeatureUseCount = 2000)
}
}
RUNcca="NO"
if(RUNcca=="YES"){
print(paste0("Running CCA"))
sample.integrated <- func.CCA(sample.Names, pkWD, featureForCCA, CCAdimension)
}
#sample.Names <- c("MYSC44", "MYSC46", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60", "MYSC45", "MYSC47")
#sample.Names <- c("CNSTM-068-A", "CNSTM-068-B", "CNSTM-068-C", "CNSTM-068-D", "CNSTM-070-A", "CNSTM-070-C", "CNSTM-070-D", "CNSTM-070-F", "CNSTM-081-A", "CNSTM-081-B", "CNSTM-081-C", "CNSTM-081-D", "CNSTM-096-1", "CNSTM-096-2", "CNSTM-096-4", "CNSTM-096-5")
#sample.Names <- c("CNSTM-096-1", "CNSTM-096-2", "CNSTM-096-4", "CNSTM-096-5")
sample.Names <- c("CNSTM-081-A", "CNSTM-081-B", "CNSTM-081-C", "CNSTM-081-D")
PreProcess="YES"
if(PreProcess=="YES"){
print(paste0("Pre-processing the data"))
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
for(i in 1:length(sample.Names)){
#i=10
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
print(paste0("Removing Doublet Cells for ",Sample))
Read10X_RemoveDoublets_Norm(matrix.DIR, saveDIR, Sample, Doublet.DIR, FeatureUseCount = 2000)
}
}
dev.off()
dev.off()
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
