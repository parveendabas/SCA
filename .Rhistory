---
title: "Scatter_BMCB_Manuscript"
author: "PK"
date: "12/20/2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Scatter_BMCB_Manuscript"
author: "PK"
date: "12/20/2017"
output: html_document
---
install.packages("rmarkdown")
---
title: "Scatter_BMCB_Manuscript"
author: "PK"
date: "12/20/2017"
output: html_document
---
knit_with_parameters('~/Desktop/Work/Jax/Scripts/Scatter_BMCB_Manuscript_MarkDown.Rmd')
knitr::opts_chunk$set(echo = TRUE)
```{r pressure, echo=FALSE}
```{r }
?knitr::knit
7997 + 8396
16393 / 12
require(multtest)
source("https://bioconductor.org/biocLite.R")
biocLite("multtest")
require(multtest)
data(golub)
class(golub)
dim(golub)
head(golub)
dim(golub.gnames)
golub.gnames[1:4, ]
golub.cl
set.seed(620)
x = matrix(rnorm(10000*5),nrow=10000)
y = matrix(rnorm(10000*5),nrow=10000)
x = matrix(rnorm(10000*5),nrow=10000); corner(x); dim(x)
library(useful)
set.seed(620)
x = matrix(rnorm(10000*5),nrow=10000); corner(x); dim(x)
y = matrix(rnorm(10000*5),nrow=10000); corner(x); dim(x)
p = sapply(1:10000, function(i) t.test(x[i,],y[i,])$p.val)
p
length(p[p > 0.05,])
class(p)
length(p)
sum(p>0.05)
sum(p<0.05)
q = p.adjust(p, method = "fdr")
q
sum(q<0.05)
y[9901:10000,] = rnorm(500, mean=3)
p = sapply(1:10000, function(i) t.test(x[i,],y[i,])$p.val)
q = p.adjust(p, method = "fdr")
sum(p<0.05)
sum(q<0.05)
set.seed(1)
population = unlist( read.csv("femaleControlsPopulation.csv") )
population = unlist( read.csv("/Users/kumarpa/Desktop/Work/Jax/Scripts/femaleControlsPopulation.csv") )
alpha <- 0.05
N <- 12
m <- 10000
control = sample(population,N)
control
treatment
treatment = sample(population,N)
treatment
t.test(treatment,control)$p.value
pvals <- replicate(m,{
control = sample(population,N)
treatment = sample(population,N)
t.test(treatment,control)$p.value
})
pvals
length(pvals)
PatientDIR="/projects/kumarpa/TET2_NaiveBcells/AML_SC_RNA/AltAnalyze/Only_Myel_Lineage"
patient = "Patient10-Pre_NatCom_Mye"
RunDIR=paste0(PatientDIR,"/Output_",patient)
RunDIR
pkWD <- paste0(RunDIR); pkWD
AltAnalyzeFilteredExprDir <- paste0(pkWD,"/ICGS")
AltAnalyzeFilteredExprDir
patient = "Patient10-Pre_NatCom_Myel"
RunDIR=paste0(PatientDIR,"/Output_",patient)
RunDIR
AltAnalyzeFilteredExprDir <- paste0(pkWD,"/ICGS")
AltAnalyzeFilteredExprDir
pkWD <- paste0(RunDIR); pkWD
AltAnalyzeFilteredExprDir <- paste0(pkWD,"/ICGS")
AltAnalyzeFilteredExprDir
363/3
121/10
400/3
13.3
363+24+3
14.84*12
setwd("/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/Data_Input/PatientALL")
SCdata <- readRDS("Seurat_Formatted_Normalized_USE_GBM_PatientALL.rds")
FeaturePlot(SCdata, features = "PTPRC")
library(Seurat)
FeaturePlot(SCdata, features = "PTPRC")
library(harmony)
?RunHarmony
?FindSubCluster
FeaturePlot(SCdata, features = "TOP2A")
FeaturePlot(SCdata, features = "CD3E")
FeaturePlot(SCdata, features = "CD3E", pt.size = 1)
?Filter_Genes_from_Variable_Genelist
Filter_Genes_from_Variable_Genelist
FeaturePlot(SCdata, features = c("CD3E","PTPRC"), pt.size = 1)
for(i in 1:(length(5)-1)){
#i=1
ident1=ColNamesToPlot[i]
ident1Palette=ColPaletteToPlot[[i]]
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
z=i+1
for(j in z:length(5)){
#j=2
ident2=ColNamesToPlot[j]
ident2Palette=ColPaletteToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
for(i in 1:(length(5)-1)){
#i=1
ident1=ColNamesToPlot[i]
ident1Palette=ColPaletteToPlot[[i]]
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
z=i+1
for(j in z:length(5)){
#j=2
ident2=ColNamesToPlot[j]
ident2Palette=ColPaletteToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
for(i in 1:(length(5)-1)){
#i=1
ident1=i
ident1Palette=i
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
z=i+1
for(j in z:length(5)){
#j=2
ident2=j
ident2Palette=j
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
for(i in 1:(length(5)-1)){
#i=1
ident1=i
ident1Palette=i
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
}
for(i in 1:(5-1)){
#i=1
ident1=i
ident1Palette=i
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
z=i+1
for(j in z:5){
#j=2
ident2=j
ident2Palette=j
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
for(i in 1:(5-1)){
#i=1
ident1=i
ident1Palette=i
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
z=i+1
for(j in z:5){
#j=2
ident2=j
ident2Palette=j
print(paste0("        ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot)-1)){
#i=1
ident1=ColNamesToPlot[i]
ident1Palette=ColPaletteToPlot[[i]]
print(paste0("ident1 for Histogram plotting is: ",ident1, " (",i,")"))
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
ident2Palette=ColPaletteToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot)-1)){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Histogram plotting is: ",ident1, " (",i,")"))
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot)-1)){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Histogram plotting is: ",ident1, " (",i,")"))
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot)-1)){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Histogram plotting is: ",ident1, " (",i,")"))
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("        ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot)-1)){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Histogram plotting is: ",ident1, " (",i,")"))
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("        ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot))){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Histogram plotting is: ",ident1, " (",i,")"))
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("        ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot))){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
#z=i+1
#for(j in z:length(ColNamesToPlot)){
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot))){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
#z=i+1
#for(j in z:length(ColNamesToPlot)){
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot))){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
#z=i+1
#for(j in z:length(ColNamesToPlot)){
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot))){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
#z=i+1
#for(j in z:length(ColNamesToPlot)){
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("ident2 for plotting is: ",ident2, " (",j,")"))
}
}
ColNamesToPlot <- c("A", "B", "C", "D", "E")
for(i in 1:(length(ColNamesToPlot))){
#i=1
ident1=ColNamesToPlot[i]
print(paste0("ident1 for Table plotting is: ",ident1, " (",i,")"))
#z=i+1
#for(j in z:length(ColNamesToPlot)){
for(j in (1:length(ColNamesToPlot))[!1:length(ColNamesToPlot) %in% i]){
#j=2
ident2=ColNamesToPlot[j]
print(paste0("    ident2 for plotting is: ",ident2, " (",j,")"))
}
}
dev.off()
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
Doublet_Detection_DF
?RunHarmony
Sys.time()
?ScaleData
?CellCycleScoring
