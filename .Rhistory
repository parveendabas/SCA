print(plot_grid(p1, p2, NULL, NULL, nrow = 2))
print(plot_grid(p2))
dev.off()
}
setwd(plotWD1)
RUNheatmap="YES"
if(RUNheatmap=="YES"){
Idents(Temp.object) <- ToUseCol
##ToUseOrder <- sort(unique(Temp.object@meta.data[,ToUseCol])); ToUseOrder
Idents(Temp.object) <- factor(Idents(Temp.object), levels= ToUseOrder[ToUseOrder %in% unique(Temp.object@meta.data[,ToUseCol])])
markers <- FindAllMarkers(Temp.object, only.pos = TRUE, min.pct = 0.25, logfc.threshold = log2(FCcutoff), assay = "RNA")
markers <- markers[markers$p_val_adj < FDR,]; dim(markers)
markers <- Remove_Genes_Rp_mt_Rna_Mouse(markers)
head(markers, n = 15); print(dim(markers))
if(nrow(markers) > 0){
top <- markers %>% group_by(cluster) %>% top_n(n = topnumber, wt = avg_logFC); top <- top[!duplicated(top$gene),]; dim(top);
topFDR <- markers %>% dplyr::arrange(p_val_adj, desc(avg_logFC)) %>% dplyr::group_by(cluster) %>% dplyr::slice(1:topnumber); topFDR <- topFDR[!duplicated(topFDR$gene),]; dim(topFDR);
write.table(markers, file = paste0("DEGs_Heatmap_",DgeNameInpdf,".txt"),quote=F,sep="\t")
SCdata.temp.Heatmap <- subset(Temp.object, downsample=downsampleHeatmap)
SCdata.temp.Heatmap <- ScaleData(object = SCdata.temp.Heatmap, verbose = FALSE, features = markers$gene)
dtype="scale.data"
nor.exp <- GetAssayData(object = SCdata.temp.Heatmap, slot = dtype); print(dim(nor.exp))
UseGenes <- intersect(markers$gene, rownames(nor.exp)); length(UseGenes)
nor.exp <- nor.exp[UseGenes,,drop=FALSE]; dim(nor.exp)
table(SCdata.temp.Heatmap@meta.data[,ToUseCol], SCdata.temp.Heatmap@meta.data[,GroupName])
#check <- intersect(GroupOrder, unique(SCdata.temp.Heatmap@meta.data[,GroupName])); check
meta.data.plot <- SCdata.temp.Heatmap@meta.data[,c(ToUseCol, GroupCol)]; head(meta.data.plot)
meta.data.plot[,ToUseCol] <- factor(meta.data.plot[,ToUseCol], levels = ToUseOrder[ToUseOrder %in% unique(Temp.object@meta.data[,ToUseCol])])
meta.data.plot[,GroupCol] <- factor(meta.data.plot[,GroupCol], levels = GroupColOrder)
meta.data.plot <- meta.data.plot[order(factor(meta.data.plot[,ToUseCol], levels = ToUseOrder[ToUseOrder %in% unique(Temp.object@meta.data[,ToUseCol])]), factor(meta.data.plot[,GroupCol], levels = GroupColOrder)),]; head(meta.data.plot)
nor.exp <- nor.exp[,rownames(meta.data.plot), drop=FALSE]
colnames(meta.data.plot) <- c("Cluster", "Group")
head(meta.data.plot)
print(dim(nor.exp))
#Cluster.FULL = c(`1` = "#0000ee", `2` = "#27408B", `3` = "#56B4E9", `4` = "#00ffff", `5` = "#ff0000", `6` = "#8b0000", `7` = "#CD5C5C", `8` = "#ff80bf", `9` = "#008000", `10` = "#00ff00", `11` = "#CAFF70", `12` = "#E69F00", `13` = "#ffb90f", `14` = "#DEB887", `15` = "#F0E442", `16` = "#ffff00", `17` = "#8B008B", `18` = "#bf3eff", `19` = "#7FFFD4", `20` = "#b5d4ff", `21` = "#FF1493", `22` = "#ff8247", `23` = "#836fff", `24` = "#787878", `25` = "#999999", `26` = "#D3D3D3", `27` = "#000000")
#Group.FULL = c(`B6` = "#00008b", `S100A4-/-` = "#cd5b45")
Cluster.FULL <- ToUsePallete[ToUseOrder %in% unique(meta.data.plot[,"Cluster"])]; names(Cluster.FULL) <- ToUseOrder[ToUseOrder %in% unique(meta.data.plot[,"Cluster"])]; Cluster.FULL
Group.FULL <- GroupColPalette[1:length(GroupColOrder)]; names(Group.FULL) <- GroupColOrder; Group.FULL
ann_colors = list(
Cluster = Cluster.FULL[names(Cluster.FULL) %in% as.character(unique(meta.data.plot$Cluster))],
#CT = CT.FULL[names(CT.FULL) %in% as.character(unique(meta.data.plot$CT))],
#Project = Project.FULL[names(Project.FULL) %in% as.character(unique(meta.data.plot$Project))],
Group = Group.FULL[names(Group.FULL) %in% as.character(unique(meta.data.plot$Group))]
)
colors <- c(seq(-2,4,by=0.01),max(nor.exp))
my_palette <- c(colorRampPalette(colors = c("#a7c5f2", "#e6f0f5", "gray97", "darksalmon", "orangered3", "darkred")) (n = length(colors)-3), "firebrick4")
pdf(file=paste0("DEGs_Heatmap_",DgeNameInpdf,".pdf"),height = 14,width = 20)
print(pheatmap(nor.exp[topFDR$gene,],annotation_col=meta.data.plot,show_colnames=F,show_rownames=T,  color=my_palette, breaks=colors,
annotation_colors = ann_colors, cluster_rows = FALSE, cluster_cols = FALSE, main = paste0("Heatmap All markers, Max cells plotted per group:",downsampleHeatmap), fontsize = 13))
print(pheatmap(nor.exp[top$gene,],annotation_col=meta.data.plot,show_colnames=F,show_rownames=T,  color=my_palette, breaks=colors,
annotation_colors = ann_colors, cluster_rows = FALSE, cluster_cols = FALSE, main = paste0("Heatmap All markers, Max cells plotted per group:",downsampleHeatmap), fontsize = 13))
#print(pheatmap(nor.exp,annotation_col=meta.data.plot,show_colnames=F,show_rownames=T,  color=my_palette, breaks=colors,
#               cluster_rows = FALSE, cluster_cols = FALSE, main = paste0("Heatmap All markers"), fontsize = 13))
dev.off()
rm(SCdata.temp.Heatmap)
}
}
setwd(plotWD1)
SCdata.temp <- Temp.object
Idents(SCdata.temp) <- ToUseCol
#ToUseOrder <- sort(unique(SCdata.temp@meta.data[,ToUseCol])); ToUseOrder
Idents(SCdata.temp) <- factor(Idents(SCdata.temp), levels= ToUseOrder)
for(ID1 in sort(unique(Temp.object@meta.data[,ToUseCol]))){
#for(ID1 in c(7,  8,  9,  10, 11, 12)){
#ID1="1"
print(paste0("Processing ",ID1))
setwd(plotWD1)
DEGcompdir <- paste(getwd(),paste0("DGEs_",ToUseCol,"_",ID1,"_VS_Rest"),sep="/"); print(DEGcompdir)
dir.create(file.path(getwd(),paste0("DGEs_",ToUseCol,"_",ID1,"_VS_Rest")), showWarnings = FALSE)
print(paste0("Finding out differential genes of ---- ",ID1, " ---- VS rest of the cells"))
cond.markers <- FindMarkers(SCdata.temp, slot = "data", ident.1 = ID1, min.pct=0.25, logfc.threshold=log2(FCcutoff), verbose = TRUE, assay = "RNA")
cond.markers$gene <- rownames(cond.markers)
print(head(cond.markers, n = 15)); print(dim(cond.markers))
cond.markers <- cond.markers[cond.markers$p_val_adj < FDR,]; dim(cond.markers)
cond.markers <- Remove_Genes_Rp_mt_Rna_Mouse(cond.markers)
sigGenes <- rownames(cond.markers)
print(paste0("DONE: DGEs of ",ID1, " VS rest of the cells"))
setwd(DEGcompdir)
write.table(cond.markers, file = paste0("DGEs_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,"_Genes",nrow(cond.markers),".txt"),quote=F,sep="\t")
DGEcondName <- c("UP", "DOWN"); DGEcondName
DGEcondGenes <- list()
temp.DGE <- cond.markers[cond.markers$avg_logFC > 0,]; head(temp.DGE); dim(temp.DGE)
DGEcondGenes[[1]] <- rownames(temp.DGE); head(DGEcondGenes[[1]]); length(DGEcondGenes[[1]])
write.table(temp.DGE, file = paste0("DGEs_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,"_UP_Genes",nrow(temp.DGE),".txt"),quote=F,sep="\t")
temp.DGE <- cond.markers[cond.markers$avg_logFC < 0,]; head(temp.DGE); dim(temp.DGE)
DGEcondGenes[[2]] <- rownames(temp.DGE); head(DGEcondGenes[[2]]); length(DGEcondGenes[[2]])
write.table(temp.DGE, file = paste0("DGEs_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,"_DOWN_Genes",nrow(temp.DGE),".txt"),quote=F,sep="\t")
if(nrow(cond.markers[cond.markers$avg_logFC > 0,]) > 0){
## Discarding negative genes
cond.markers  <- cond.markers[cond.markers$avg_logFC > 0,]; dim(cond.markers)
cond.markers <- head(cond.markers,30)
### Key plots
RUNViolinNoPoints="YES"
if(RUNViolinNoPoints=="YES"){
setwd(DEGcompdir)
print(paste0("ViolinPlot of positive to 30 genes by FC -- ",ID1, " VS rest of the cells"))
pdf(file=paste0("DEGs_Violin_plots_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,".pdf"),height = 24,width = 35)
genesTo.Plot <- rownames(cond.markers); genesTo.Plot
if(length(genesTo.Plot) < 7){
set <- split(genesTo.Plot, ceiling(seq_along(genesTo.Plot)/6)); length(set)
} else {
set <- split(genesTo.Plot, ceiling(seq_along(genesTo.Plot)/15)); length(set)
}
for(i in 1:length(set)){
#i=2
print(paste0("Set no. ",i," of total ",length(set)," sets"))
#plots <- VlnPlot(SCdata.temp, features = set[[i]], split.by = "Patient", pt.size = 0, combine = FALSE)
plots <- VlnPlot(SCdata.temp, features = set[[i]], pt.size = 0, combine = FALSE, cols = ToUsePallete[ToUseOrder %in% unique(SCdata.temp@meta.data[,ToUseCol])])
print(CombinePlots(plots = plots, ncol = 3))
}
dev.off()
}
RUNViolinPoints="YES"
if(RUNViolinPoints=="YES"){
setwd(DEGcompdir)
print(paste0("ViolinPlot with points of positive to 30 genes by FC -- ",ID1, " VS rest of the cells"))
pdf(file=paste0("DEGs_Violin_plots_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,"_Points.pdf"),height = 24,width = 35)
genesTo.Plot <- rownames(cond.markers); genesTo.Plot
if(length(genesTo.Plot) < 7){
set <- split(genesTo.Plot, ceiling(seq_along(genesTo.Plot)/6)); length(set)
} else {
set <- split(genesTo.Plot, ceiling(seq_along(genesTo.Plot)/15)); length(set)
}
for(i in 1:length(set)){
#i=2
print(paste0("Set no. ",i," of total ",length(set)," sets"))
#plots <- VlnPlot(SCdata.temp, features = set[[i]], split.by = "Patient", pt.size = 0, combine = FALSE)
plots <- VlnPlot(SCdata.temp, features = set[[i]], pt.size = 0.1, combine = FALSE, cols =  ToUsePallete[ToUseOrder %in% unique(SCdata.temp@meta.data[,ToUseCol])])
print(CombinePlots(plots = plots, ncol = 3))
}
dev.off()
}
RUNDotPlot="YES"
if(RUNDotPlot=="YES"){
setwd(DEGcompdir)
print(paste0("Dotplot of positive to 30 genes by FC -- ",ID1, " VS rest of the cells"))
pdf(file=paste0("DEGs_DotPlot_plots_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,".pdf"),height = 14,width =20)
genesTo.Plot <- rownames(cond.markers); genesTo.Plot
set <- split(genesTo.Plot, ceiling(seq_along(genesTo.Plot)/30)); length(set)
for(i in 1:length(set)){
#i=1
print(paste0("Set no. ",i," of total ",length(set)," sets"))
print(DotPlot(SCdata.temp, features = rev(set[[i]]), dot.scale = 10, cols = c("dodgerblue", "red")) + RotatedAxis())
#print(DotPlot(SCdata.temp, features = rev(set[[i]]), dot.scale = 10, cols = c("blue", "red", "green", "pink"), split.by = GroupName) + RotatedAxis())
}
dev.off()
}
RUNthis="YES"
if(RUNthis=="YES"){
setwd(DEGcompdir)
print(paste0("Featureplot of positive to 30 genes by FC -- ",ID1, " VS rest of the cells"))
SCdata.temp.Feature <- subset(SCdata.temp, downsample=downsampleHeatmap)
SCdata.temp.Feature
pdf(file=paste0("DEGs_Feature_plots_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,".pdf"),height = 16,width =18)
genesTo.Plot <- rownames(cond.markers); genesTo.Plot
if(length(genesTo.Plot) < 7){
set <- split(genesTo.Plot, ceiling(seq_along(genesTo.Plot)/6)); length(set)
} else {
set <- split(genesTo.Plot, ceiling(seq_along(genesTo.Plot)/15)); length(set)
}
for(i in 1:length(set)){
#i=1
print(paste0("Set no. ",i," of total ",length(set)," sets"))
print(FeaturePlot(SCdata.temp.Feature, features = set[[i]], ncol=3, #max.cutoff = 4,
cols = c("grey", "blue")))
}
dev.off()
}
RUNthis="YES"
if(RUNthis=="YES"){
if(nrow(cond.markers) > 1){
print(paste0("Heatmap of positive to 30 genes by FC -- ",ID1, " VS rest of the cells"))
sigGenes <- rownames(cond.markers); sigGenes
### Plotting Heatmap
### ReCopying Meta Data into SampleInfo.temp after Corrections
table(SCdata.temp@meta.data[,ToUseCol])
SCdata.temp.Heatmap <- subset(Temp.object, downsample=downsampleHeatmap)
SCdata.temp.Heatmap <- ScaleData(object = SCdata.temp.Heatmap, verbose = FALSE, features = cond.markers$gene)
dtype="scale.data"
nor.exp <- GetAssayData(object = SCdata.temp.Heatmap, slot = dtype); print(dim(nor.exp))
UseGenes <- intersect(rownames(cond.markers), rownames(nor.exp)); length(UseGenes)
nor.exp <- nor.exp[UseGenes,,drop=FALSE]; dim(nor.exp)
table(SCdata.temp.Heatmap@meta.data[,ToUseCol], SCdata.temp.Heatmap@meta.data[,GroupName])
meta.data.plot <- SCdata.temp.Heatmap@meta.data[,c(ToUseCol, GroupCol)]; head(meta.data.plot)
meta.data.plot[,ToUseCol] <- factor(meta.data.plot[,ToUseCol], levels = ToUseOrder[ToUseOrder %in% unique(Temp.object@meta.data[,ToUseCol])])
meta.data.plot[,GroupCol] <- factor(meta.data.plot[,GroupCol], levels = GroupColOrder)
meta.data.plot <- meta.data.plot[order(factor(meta.data.plot[,ToUseCol], levels = ToUseOrder[ToUseOrder %in% unique(Temp.object@meta.data[,ToUseCol])]), factor(meta.data.plot[,GroupCol], levels = GroupColOrder)),]; head(meta.data.plot)
nor.exp <- nor.exp[,rownames(meta.data.plot), drop=FALSE]
colnames(meta.data.plot) <- c("Cluster", "Group")
head(meta.data.plot)
print(dim(nor.exp))
setwd(DEGcompdir)
## Plot only CTfinal
colors <- c(seq(-2,4,by=0.01),max(nor.exp))
my_palette <- c(colorRampPalette(colors = c("#a7c5f2", "#e6f0f5", "gray97", "darksalmon", "orangered3", "darkred")) (n = length(colors)-3), "firebrick4")
pdf(file=paste0("DEGs_Heatmap_plots_",ID1,"_VS_Rest_FDR_",FDR,"_and_Fold_",FCcutoff,"_Points.pdf"),height = 14,width = 16)
print(pheatmap(nor.exp,annotation_col=meta.data.plot,show_colnames=F,show_rownames=T,  color=my_palette, breaks=colors,
annotation_colors = ann_colors, cluster_rows = FALSE, cluster_cols = FALSE, main = paste0("Heatmap, ",ID1,"_VS_Rest, Max cells plotted per group:",downsampleHeatmap), fontsize = 13))
print(pheatmap(nor.exp,annotation_col=meta.data.plot,show_colnames=F,show_rownames=T,  color=my_palette, breaks=colors,
annotation_colors = ann_colors, cluster_rows = TRUE, cluster_cols = FALSE, main = paste0("Heatmap, ",ID1,"_VS_Rest, Max cells plotted per group:",downsampleHeatmap), fontsize = 13))
print(pheatmap(nor.exp,annotation_col=meta.data.plot,show_colnames=F,show_rownames=T,  color=my_palette, breaks=colors,
annotation_colors = ann_colors, cluster_rows = TRUE, cluster_cols = TRUE, main = paste0("Heatmap, ",ID1,"_VS_Rest, Max cells plotted per group:",downsampleHeatmap), fontsize = 13))
dev.off()
}
}
}
}
print("Done")
print(Sys.time())
}
#' A Perform_CCA Function
#'
#' This function allows you to express your love of cats.
#' @param TempAll.object A list of Seurat objects between which to find anchors for downstream integration.
#' @param NameInpdf Path to save Quality plots and RDS data.
#' @param saveDIR Suffix to be added to CCA files.
#' @param FeatureUseCount A numeric value. This will call SelectIntegrationFeatures to select the provided number of features to be used in anchor finding
#' @param CCAdimchosen Which dimensions to use from the CCA to specify the neighbor search space
#' @param res Value of the resolution parameter, use a value above (below) 1.0 if you want to obtain a larger (smaller) number of communities. Algorithm for modularity optimization (1 = original Louvain algorithm; 2 = Louvain algorithm with multilevel refinement; 3 = SLM algorithm; 4 = Leiden algorithm). Leiden requires the leidenalg python.
#' @param plots Save CCA plots
#' @param save Save integrated CCA RDS Seurat object
#' @keywords TempAll.object, NameInpdf, saveDIR, FeatureUseCount, CCAdimchosen, res, plots, save
#' @export
#' @examples
#' Perform_CCA()
Perform_CCA <- function(TempAll.object, NameInpdf, saveDIR, FeatureUseCount=2500, CCAdimchosen=30, res = 0.5, plots = TRUE, save = TRUE){
#TempAll.object=Sampleall.object
print(paste0("Performing CCA for ",length(TempAll.object)," Objects"))
reference.list <- c(TempAll.object)
print(paste0("Finding IntegrationAnchors"))
sample.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:CCAdimchosen, anchor.features = FeatureUseCount)
## We then pass these anchors to the IntegrateData function, which returns a Seurat object.
## The returned object will contain a new Assay, which holds an integrated (or ‘batch-corrected’) expression matrix for all cells, enabling them to be jointly analyzed.
print(paste0("Integrating Data"))
temp.integrated <- IntegrateData(anchorset = sample.anchors, dims = 1:CCAdimchosen)
##After running IntegrateData, the Seurat object will contain a new Assay with the integrated expression matrix. Note that the original (uncorrected values)
## are still stored in the object in the “RNA” assay, so you can switch back and forth.
#saveRDS(object = temp.integrated, file = paste0(NameInpdf,".rds"))
## We can then use this new integrated matrix for downstream analysis and visualization. Here we scale the integrated data, run PCA, and visualize the results with UMAP.
## The integrated datasets cluster by cell type, instead of by technology.
# switch to integrated assay. The variable features of this assay are automatically set during
# IntegrateData
DefaultAssay(object = temp.integrated) <- "integrated"
# Run the standard workflow for visualization and clustering
temp.integrated <- ScaleData(object = temp.integrated, verbose = FALSE)
temp.integrated <- RunPCA(object = temp.integrated, npcs = CCAdimchosen, verbose = FALSE)
temp.integrated <- RunUMAP(object = temp.integrated, reduction = "pca", dims = 1:CCAdimchosen)
p=q=list()
temp.integrated1 <- temp.integrated
Tempreslist=c("0.1", "0.2", "0.3", "0.5", "0.8")
for(Tempres in Tempreslist){
#for(Tempres in c("0.1", "0.2", "0.3")){
#Tempres="0.1"
print(paste0("Processing for Temp resolution ",Tempres))
temp.integrated1 <- FindNeighbors(temp.integrated1, dims = 1:CCAdimchosen)
temp.integrated1 <- FindClusters(temp.integrated1, resolution = as.numeric(Tempres))
if (plots == TRUE) {
print(paste0("Generating different resolution plots for PCA ",CCAdimchosen))
p[[Tempres]]  <- DimPlot(temp.integrated1, reduction = "umap", group.by = "seurat_clusters")
q[[Tempres]]  <- DimPlot(temp.integrated1, reduction = "umap", group.by = "orig.ident")
#print(plot_grid(p1, p2, NULL, NULL, nrow = 2))
}
}
rm(temp.integrated1)
pdf(file=paste0("Plots_CCA_",NameInpdf,"_PC",CCAdimchosen,"_Different_Resolutions.pdf"),height = 10,width = 14)
print(ElbowPlot(temp.integrated, ndims = CCAdimchosen) + ggtitle(paste("PCs ",CCAdimchosen)))
print(plot_grid(q[["0.1"]]))
#print(plot_grid(p[["0.1"]], p[["0.2"]], p[["0.3"]], p[["0.4"]], p[["0.5"]], p[["0.6"]], p[["0.7"]], p[["0.8"]], p[["0.9"]], ncol = 3),
blank <- ggplot() + theme_bw() + ggtitle(paste0("PCs ",CCAdimchosen)) + theme(plot.title = element_text(size=50, colour = "red"))
print(plot_grid(p[["0.1"]], p[["0.2"]], p[["0.3"]], p[["0.5"]], p[["0.8"]], blank, ncol = 3, labels=c("0.1", "0.2", "0.3", "0.5", "0.8")))
dev.off()
temp.integrated <- FindNeighbors(temp.integrated, dims = 1:CCAdimchosen)
temp.integrated <- FindClusters(temp.integrated, resolution = res)
setwd(saveDIR)
if (plots == TRUE) {
print("Generating quality plots")
pdf(file=paste0("Plots_CCA_",NameInpdf,".pdf"),height = 10,width = 14)
print(ElbowPlot(temp.integrated, ndims = CCAdimchosen) + ggtitle(paste("PCs ",CCAdimchosen)))
p1 <- DimPlot(temp.integrated, reduction = "umap", group.by = GroupName)
p2 <- DimPlot(temp.integrated, reduction = "umap", group.by = "seurat_clusters")
print(plot_grid(p1, p2, NULL, NULL, nrow = 2))
print(DimPlot(temp.integrated, reduction = "umap", group.by = "seurat_clusters", split.by = GroupName, ncol = 3))
print(DimPlot(temp.integrated, reduction = "umap", group.by = GroupName, split.by = "seurat_clusters", ncol = 5))
Create_Table(temp.integrated)
print(VlnPlot(temp.integrated, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rb"), pt.size = 0.5, ncol = 2))
dev.off()
}
if (save == TRUE) {
print("Saving Seurat RDS object and meta data")
setwd(saveDIR)
write.table(temp.integrated@meta.data,file=paste0("Meta_Data_",NameInpdf,".txt"),quote=F,sep="\t")
saveRDS(object = temp.integrated, file = paste0(NameInpdf,".rds"))
}
return(temp.integrated)
rm(TempAll.object)
print("Done")
print(Sys.time())
}
#' A Perform_CCA_Diff_PCAdim_res Function
#'
#' This function allows you to express your love of cats.
#' @param Sampleall.object A list of Seurat objects between which to find anchors for downstream integration.
#' @param NameInpdf Path to save Quality plots and RDS data.
#' @param saveDIR Suffix to be added to CCA files.
#' @param FeatureUseCount A numeric value. This will call SelectIntegrationFeatures to select the provided number of features to be used in anchor finding
#' @param plots Save CCA plots
#' @param save Save integrated CCA RDS Seurat object
#' @keywords Sampleall.object, NameInpdf, saveDIR, FeatureUseCount, TempCCAdimchosen, res, plots, save
#' @export
#' @examples
#' Perform_CCA_Diff_PCAdim_res()
Perform_CCA_Diff_PCAdim_res <- function(Sampleall.object, NameInpdf, saveDIR, TempCCAdimchosenlist=c(15, 20, 30), FeatureUseCount=2500, plots = TRUE, save = FALSE){
TempAll.object=Sampleall.object
print(paste0("Performing CCA for ",length(TempAll.object)," Objects"))
pdf(file=paste0("Plots_CCA_",NameInpdf,"_Different_PCs_and_Resolutions.pdf"),height = 12,width = 16)
print(ElbowPlot(temp.integrated, ndims = 30) + ggtitle(paste((unlist(TempCCAdimchosenlist)), collapse=",")))
for(TempCCAdimchosen in TempCCAdimchosenlist){
#TempCCAdimchosen=20
print(paste0("Processing for Temp PCA ",TempCCAdimchosen))
reference.list <- c(TempAll.object)
print(paste0("Finding IntegrationAnchors"))
sample.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:TempCCAdimchosen, anchor.features = FeatureUseCount)
## We then pass these anchors to the IntegrateData function, which returns a Seurat object.
## The returned object will contain a new Assay, which holds an integrated (or ‘batch-corrected’) expression matrix for all cells, enabling them to be jointly analyzed.
print(paste0("Integrating Data"))
temp.integrated <- IntegrateData(anchorset = sample.anchors, dims = 1:TempCCAdimchosen)
##After running IntegrateData, the Seurat object will contain a new Assay with the integrated expression matrix. Note that the original (uncorrected values)
## are still stored in the object in the “RNA” assay, so you can switch back and forth.
#saveRDS(object = temp.integrated, file = paste0(NameInpdf,".rds"))
## We can then use this new integrated matrix for downstream analysis and visualization. Here we scale the integrated data, run PCA, and visualize the results with UMAP.
## The integrated datasets cluster by cell type, instead of by technology.
# switch to integrated assay. The variable features of this assay are automatically set during
# IntegrateData
DefaultAssay(object = temp.integrated) <- "integrated"
# Run the standard workflow for visualization and clustering
temp.integrated <- ScaleData(object = temp.integrated, verbose = FALSE)
temp.integrated <- RunPCA(object = temp.integrated, npcs = TempCCAdimchosen, verbose = FALSE)
temp.integrated <- RunUMAP(object = temp.integrated, reduction = "pca", dims = 1:TempCCAdimchosen)
setwd(saveDIR)
p=q=list()
Tempreslist=c("0.1", "0.2", "0.3", "0.5", "0.8")
for(Tempres in Tempreslist){
#for(Tempres in c("0.1", "0.2", "0.3")){
#Tempres="0.1"
print(paste0("Processing for Temp resolution ",Tempres))
temp.integrated <- FindNeighbors(temp.integrated, dims = 1:TempCCAdimchosen)
temp.integrated <- FindClusters(temp.integrated, resolution = as.numeric(Tempres))
if (plots == TRUE) {
print(paste0("Generating different resolution plots for PCA ",TempCCAdimchosen))
p[[Tempres]]  <- DimPlot(temp.integrated, reduction = "umap", group.by = "seurat_clusters")
q[[Tempres]]  <- DimPlot(temp.integrated, reduction = "umap", group.by = GroupName)
#print(plot_grid(p1, p2, NULL, NULL, nrow = 2))
}
}
print(plot_grid(q[["0.1"]]))
#print(plot_grid(p[["0.1"]], p[["0.2"]], p[["0.3"]], p[["0.4"]], p[["0.5"]], p[["0.6"]], p[["0.7"]], p[["0.8"]], p[["0.9"]], ncol = 3),
blank <- ggplot() + theme_bw() + ggtitle(paste0("PCs ",TempCCAdimchosen)) + theme(plot.title = element_text(size=50, colour = "red"))
print(plot_grid(p[["0.1"]], p[["0.2"]], p[["0.3"]], p[["0.5"]], p[["0.8"]], blank, ncol = 3, labels=c("0.1", "0.2", "0.3", "0.5", "0.8")))
if (save == TRUE) {
print("Saving Seurat RDS object and meta data")
setwd(saveDIR)
write.table(temp.integrated@meta.data,file=paste0("Meta_Data_",NameInpdf,".txt"),quote=F,sep="\t")
saveRDS(object = temp.integrated, file = paste0(NameInpdf,"_PCA",TempCCAdimchosen,".rds"))
}
}
dev.off()
print("Done")
print(Sys.time())
}
rm(list=ls()) # clear workspace
### Using SCA package
## For github details, look at
##
library(SCA)
load_Packages_SeuratAnalysis()
ReInstallSCA="NO"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
load_Packages_SeuratAnalysis()
}
?load_Packages_SeuratAnalysis
?Read10X_Norm_Mouse
?Create_Table
?Filter_Genes_from_Variable_Genelist_Mouse
?Perform_CCA
?Perform_CCA_Diff_PCAdim_res
?Perform_DGE_ONEvsALL
load_Packages_SeuratAnalysis()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Ewalina/Functions_Ewelina_Project.R")
ClusPallette <- c("#0000ee", "#27408B", "#56B4E9", "#00ffff", "#ff0000", "#8b0000", "#CD5C5C", "#ff80bf", "#008000", "#00ff00", "#CAFF70", "#E69F00", "#DEB887", "#F0E442", "#ffff00", "#8B008B", "#bf3eff", "#7FFFD4", "#b5d4ff", "#FF1493", "#ff8247", "#836fff", "#787878", "#999999", "#D3D3D3", "#000000")
cbPalette.Group.Dark <- c("#27408B", "#8b0000", "#008000", "#E69F00", "#F0E442", "#8B008B", "#ff8247", "#787878")
cbPalette.Group.Light <- c("#0000ee", "#ff0000", "#00ff00", "#ffb90f", "#ffff00","#bf3eff", "#ff8247", "#D3D3D3")
ClusOrder <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15","16","17","18","19","20", "21", "22", "23", "24", "25", "26"); ClusOrder
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input"
#RDSdir <- paste0("/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/2016 Yanai Cell Systems/GSE84133_RAW/Human/Human_Pancreas/Data_Input/Human_Pancreas")
#RDSname <- "Only_Raw_Human_Pancreas"
OutName <- "CCA_Oocyte_SeqAgain_Chk2O"
NameInpdf="CCA_Oocyte_SeqAgain_Chk2O"
GroupName="orig.ident"
#ALLsampleNames <- c("BS16011", "BS16014", "BS16007", "BS16016", "BS16010", "BS16005", "BS16009", "BS16006", "BS16003", "BS16008", "BS16021", "BS16019", "BS16002", "BS16012", "BS16001", "BS16018", "BS16017", "BS16015", "BS16020", "BS16004", "BS16013")
#VariableGenesToHightlight=30
#CCAdimchosen=30
##Deault dim is 30
#MarkerDir <- "/Users/kumarpa/Desktop/Work/Jax/Neuron_Sadi/data matrices"
#setwd(MarkerDir)
#MarkerGenes <- read.table(file=paste0("Marker_Genes.txt"), header = TRUE, sep = "\t")
#rownames(MarkerGenes) <- MarkerGenes$Marker; MarkerGenes
setwd(pkWD)
plotWD <- paste(getwd(),paste0(OutName),sep="/"); print(plotWD)
dir.create(file.path(getwd(),paste0(OutName)), showWarnings = FALSE)
Sampleall.object=list()
#sample.Names <- c("EB20004_B6NonIR", "EB20005_B6IR", "EB20006_CH2KONonIR", "EB20007_CH2KOIR")
sample.Names <- c("EB20006_CH2KONonIR", "EB20007_CH2KOIR")
RUN="YES"
if(RUN=="YES"){
#sample.Names <- c("MS20007_Pool1F10", "MS20015_Pool7_F44")
##"Regulatory_Tcells", "Naive_Tcells", "Memory_Tcells", "CD14_Monocytes", "CD56_NKcells", "CD4_T_Helper", "Bcells", "Naive_Cytotoxic", "Cytotoxic_Tcells", "CD34"
for(i in 1:length(sample.Names)){
#i=1
name=sample.Names[i]
Sample <- name; Sample
print(paste0("Processing sample ",i,": ",name, " of ",length(sample.Names)," samples"))
#sample.rds.DIR <- paste0(pkWD,"/Analyzed_Neuron_Chris_10X_",Sample); sample.rds.DIR
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
SCdata <- Read10X_Norm_Mouse(matrix.DIR, saveDIR, Sample)
genes.filter.list <- Filter_Genes_from_Variable_Genelist_Mouse(SCdata, cc = TRUE)
length(SCdata@assays$RNA@var.features)
length(intersect(SCdata@assays$RNA@var.features, genes.filter.list))
SCdata@assays$RNA@var.features <- SCdata@assays$RNA@var.features[!SCdata@assays$RNA@var.features %in% genes.filter.list]
nrow(SCdata@meta.data)
length(SCdata@assays$RNA@var.features)
Sampleall.object[[i]] <- SCdata
print(paste0("Completed sample ",i,": ",name, " of ",length(sample.Names)," samples"))
## RUN bracket
rm(SCdata)
}
}
RUNanchor="YES"
if(RUNanchor=="YES"){
setwd(plotWD)
saveDIR <- plotWD
#sample.integrated <- Perform_CCA(Sampleall.object, NameInpdf, saveDIR, res = 0.3)
sample.integrated <- Perform_CCA(Sampleall.object[][3:4], NameInpdf, saveDIR, res = 0.2)
#sample.integrated <- FindNeighbors(sample.integrated, dims = 1:30)
#sample.integrated <- FindClusters(sample.integrated, resolution = 0.2)
####Perform_CCA_Diff_PCAdim_res(Sampleall.object, NameInpdf, saveDIR, save = FALSE)
#Perform_CCA_Diff_PCAdim_res(Sampleall.object, NameInpdf, saveDIR, save = FALSE, TempCCAdimchosenlist=c(20, 25))
table(sample.integrated@meta.data$seurat_clusters)
sample.integrated@meta.data$seurat_clusters <- as.character(as.numeric(sample.integrated@meta.data[,"seurat_clusters"]))
sample.integrated@meta.data$seurat_clusters <- factor(sample.integrated@meta.data$seurat_clusters, levels = ClusOrder[ClusOrder %in% sample.integrated@meta.data$seurat_clusters])
table(sample.integrated@meta.data$seurat_clusters)
##RUNanchor bracket
}
RUNreadData="NO"
if(RUNreadData == "YES"){
setwd(plotWD)
sample.integrated <- readRDS(paste0(NameInpdf,".rds"))
}
RUNdge="YES"
if(RUNdge=="YES"){
saveDIR <- plotWD
Idents(sample.integrated)
#check <- subset(sample.integrated, idents=(c(3,11,12)))
Perform_DGE_ONEvsALL(sample.integrated, saveDIR, GroupColOrder=sample.Names)
}
Sampleall.object
RUNanchor="YES"
if(RUNanchor=="YES"){
setwd(plotWD)
saveDIR <- plotWD
#sample.integrated <- Perform_CCA(Sampleall.object, NameInpdf, saveDIR, res = 0.3)
sample.integrated <- Perform_CCA(Sampleall.object[][1:2], NameInpdf, saveDIR, res = 0.2)
#sample.integrated <- FindNeighbors(sample.integrated, dims = 1:30)
#sample.integrated <- FindClusters(sample.integrated, resolution = 0.2)
####Perform_CCA_Diff_PCAdim_res(Sampleall.object, NameInpdf, saveDIR, save = FALSE)
#Perform_CCA_Diff_PCAdim_res(Sampleall.object, NameInpdf, saveDIR, save = FALSE, TempCCAdimchosenlist=c(20, 25))
table(sample.integrated@meta.data$seurat_clusters)
sample.integrated@meta.data$seurat_clusters <- as.character(as.numeric(sample.integrated@meta.data[,"seurat_clusters"]))
sample.integrated@meta.data$seurat_clusters <- factor(sample.integrated@meta.data$seurat_clusters, levels = ClusOrder[ClusOrder %in% sample.integrated@meta.data$seurat_clusters])
table(sample.integrated@meta.data$seurat_clusters)
##RUNanchor bracket
}
RUNreadData="NO"
if(RUNreadData == "YES"){
setwd(plotWD)
sample.integrated <- readRDS(paste0(NameInpdf,".rds"))
}
RUNdge="YES"
if(RUNdge=="YES"){
saveDIR <- plotWD
Idents(sample.integrated)
#check <- subset(sample.integrated, idents=(c(3,11,12)))
Perform_DGE_ONEvsALL(sample.integrated, saveDIR, GroupColOrder=sample.Names)
}
rm(list=ls()) # clear workspace
library("devtools")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
