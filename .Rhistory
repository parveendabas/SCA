df=data.frame(Barcode=character())
for(i in 1:length(BarOrder)){
#i=1
barUse=BarOrder[i]
print(paste0("Processing sample num: ",i, " - ",barUse))
temp[[barUse]] <- rownames(SCdata.Loupe@meta.data[SCdata.Loupe@meta.data[,BarcodeSplitIdent]==barUse,]); head(temp[[barUse]])
if(temp[[barUse]][1] %like% "-"){
print("Hyphen present")
temp[[barUse]] <- gsub("-.*", paste0("-",i), temp[[barUse]])
temp[[barUse]] <- data.frame(Barcode=temp[[barUse]])
} else {
print("Hyphen Absent")
temp[[barUse]] <- gsub("$", paste0("-",i), temp[[barUse]])
temp[[barUse]] <- data.frame(Barcode=temp[[barUse]])
}
write.table(temp[[barUse]], file = paste0("loupe_barcodes_",barUse,".csv"),quote=F,sep="\t", row.names = F)
df <- rbind(df, temp[[barUse]]); print(dim(df))
}
write.table(df, file = paste0("loupe_barcodes_formatted_order_for_cellranger.csv"),quote=F,sep="\t", row.names = F)
i=1
#i=1
barUse=BarOrder[i]
print(paste0("Processing sample num: ",i, " - ",barUse))
temp[[barUse]] <- rownames(SCdata.Loupe@meta.data[SCdata.Loupe@meta.data[,BarcodeSplitIdent]==barUse,]); head(temp[[barUse]])
temp[[barUse]] <- data.frame(Barcode=temp[[barUse]])
head(temp[[barUse]])
rownames(temp[[barUse]]) <- temp[[barUse]]$Barcode
temp[[barUse]] <- gsub("-.*", paste0("-",i), temp[[barUse]])
head(temp[[barUse]])
head(temp[[barUse]])
temp[[barUse]] <- rownames(SCdata.Loupe@meta.data[SCdata.Loupe@meta.data[,BarcodeSplitIdent]==barUse,]); head(temp[[barUse]])
print("Hyphen present")
temp[[barUse]] <- data.frame(Barcode=temp[[barUse]])
rownames(temp[[barUse]]) <- temp[[barUse]]$Barcode
head(temp[[barUse]])
temp[[barUse]]$Barcode <- gsub("-.*", paste0("-",i), temp[[barUse]]$Barcode)
head(temp[[barUse]])
temp=list();
df=data.frame(Barcode=character())
for(i in 1:length(BarOrder)){
#i=1
barUse=BarOrder[i]
print(paste0("Processing sample num: ",i, " - ",barUse))
temp[[barUse]] <- rownames(SCdata.Loupe@meta.data[SCdata.Loupe@meta.data[,BarcodeSplitIdent]==barUse,]); head(temp[[barUse]])
if(temp[[barUse]][1] %like% "-"){
print("Hyphen present")
temp[[barUse]] <- data.frame(Barcode=temp[[barUse]])
rownames(temp[[barUse]]) <- temp[[barUse]]$Barcode
temp[[barUse]]$Barcode <- gsub("-.*", paste0("-",i), temp[[barUse]]$Barcode)
} else {
print("Hyphen Absent")
temp[[barUse]] <- data.frame(Barcode=temp[[barUse]])
rownames(temp[[barUse]]) <- temp[[barUse]]$Barcode
temp[[barUse]]$Barcode <- gsub("$", paste0("-",i), temp[[barUse]]$Barcode)
}
write.table(temp[[barUse]], file = paste0("loupe_barcodes_",barUse,".csv"),quote=F,sep="\t", row.names = F)
df <- rbind(df, temp[[barUse]]); print(dim(df))
}
write.table(df, file = paste0("loupe_barcodes_formatted_order_for_cellranger.csv"),quote=F,sep="\t", row.names = F)
LoupeMetadata <- SCdata.Loupe@meta.data; head(LoupeMetadata)
ColNamesUse <- colnames(LoupeMetadata)
LoupeMetadata$Barcode <- paste0(row.names(LoupeMetadata),"-1")
LoupeMetadata <-  LoupeMetadata[,c("Barcode", ColNamesUse)]; head(LoupeMetadata)
head(LoupeMetadata)
LoupeMetadata$Temp <- NULL
LoupeMetadata$RNA_snn_res.0.3 <- NULL; LoupeMetadata$RNA_snn_res.0.4 <- NULL;  LoupeMetadata$RNA_snn_res.0.5 <- NULL;  LoupeMetadata$RNA_snn_res.0.6 <- NULL;
head(LoupeMetadata)
LoupeMetadata$Cluster <- paste0("Cluster0", LoupeMetadata$seurat_clusters); head(LoupeMetadata)
LoupeMetadata.Mod <- LoupeMetadata[,colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin")]]
write.table(LoupeMetadata.Mod, file = paste0("loupe_metadata.csv"),quote=F,sep=",", row.names = F)
LoupeUMAP <- data.frame(SCdata.Loupe@reductions$umap[[]]); head(LoupeUMAP)
ColNamesUse <- colnames(LoupeUMAP)
LoupeUMAP$Barcode <- paste0(row.names(LoupeUMAP),"-1")
LoupeUMAP <-  LoupeUMAP[,c("Barcode", ColNamesUse)];
head(LoupeUMAP)
LoupeUMAP <- data.frame(SCdata.Loupe@reductions$umap[[]]); head(LoupeUMAP)
ColNamesUse <- colnames(LoupeUMAP)
head(LoupeUMAP)
#LoupeUMAP$Barcode <- paste0(row.names(LoupeUMAP),"-1")
LoupeUMAP$Barcode <- df$Barcode[match(rownames(LoupeUMAP), rownames(df))]
LoupeUMAP <-  LoupeUMAP[,c("Barcode", ColNamesUse)];
head(LoupeUMAP)
tail(LoupeUMAP)
write.table(LoupeUMAP, file = paste0("loupe_umap.csv"),quote=F,sep=",", row.names = F)
LoupeMetadata <- SCdata.Loupe@meta.data; head(LoupeMetadata)
ColNamesUse <- colnames(LoupeMetadata)
LoupeMetadata$Barcode <- paste0(row.names(LoupeMetadata),"-1")
LoupeMetadata <-  LoupeMetadata[,c("Barcode", ColNamesUse)]; head(LoupeMetadata)
head(LoupeMetadata)
LoupeMetadata$Temp <- NULL
LoupeMetadata$RNA_snn_res.0.3 <- NULL; LoupeMetadata$RNA_snn_res.0.4 <- NULL;  LoupeMetadata$RNA_snn_res.0.5 <- NULL;  LoupeMetadata$RNA_snn_res.0.6 <- NULL;
head(LoupeMetadata)
LoupeMetadata$Cluster <- paste0("Cluster0", LoupeMetadata$seurat_clusters); head(LoupeMetadata)
LoupeMetadata.Mod <- LoupeMetadata[,colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin")]]
write.table(LoupeMetadata.Mod, file = paste0("loupe_metadata.csv"),quote=F,sep=",", row.names = F)
LoupeMetadata <- SCdata.Loupe@meta.data; head(LoupeMetadata)
ColNamesUse <- colnames(LoupeMetadata)
LoupeMetadata$Barcode <- df$Barcode[match(rownames(LoupeMetadata), rownames(df))]
#LoupeMetadata$Barcode <- paste0(row.names(LoupeMetadata),"-1")
LoupeMetadata <-  LoupeMetadata[,c("Barcode", ColNamesUse)]; head(LoupeMetadata)
head(LoupeMetadata)
head(LoupeMetadata)
LoupeMetadata$Temp <- NULL
LoupeMetadata$RNA_snn_res.0.3 <- NULL; LoupeMetadata$RNA_snn_res.0.4 <- NULL;  LoupeMetadata$RNA_snn_res.0.5 <- NULL;  LoupeMetadata$RNA_snn_res.0.6 <- NULL;
head(LoupeMetadata)
LoupeMetadata$Cluster <- paste0("Cluster0", LoupeMetadata$seurat_clusters); head(LoupeMetadata)
LoupeMetadata.Mod <- LoupeMetadata[,colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin")]]
write.table(LoupeMetadata.Mod, file = paste0("loupe_metadata.csv"),quote=F,sep=",", row.names = F)
head(LoupeMetadata)
colnames(LoupeMetadata)
LoupeMetadata.Mod <- LoupeMetadata[,colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin", "percent.rb", "percent.mt")]]
head(LoupeMetadata)
colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin", "percent.rb", "percent.mt")]
colnames(LoupeMetadata)[colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin", "percent.rb", "percent.mt")]
colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin", "percent.rb", "percent.mt")]
head(LoupeMetadata)
head(LoupeMetadata.Mod)
write.table(LoupeMetadata.Mod, file = paste0("loupe_metadata.csv"),quote=F,sep=",", row.names = F)
LoupeMetadata.Mod <- LoupeMetadata[,colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin", "percent.rb", "percent.mt", "RNA_snn_res.0.1", "seurat_clusters", "RNA_snn_res.0.2")]]
head(LoupeMetadata.Mod)
LoupeMetadata.Mod <- LoupeMetadata[,colnames(LoupeMetadata)[!colnames(LoupeMetadata) %in% c("nCount_RNA","nFeature_RNA", "nCount_HTO", "nFeature_HTO", "HTO_margin", "percent.rb", "percent.mt", "RNA_snn_res.0.1", "seurat_clusters", "RNA_snn_res.0.2", "BarcodeIdent")]]
head(LoupeMetadata.Mod)
write.table(LoupeMetadata.Mod, file = paste0("loupe_metadata.csv"),quote=F,sep=",", row.names = F)
rm(list=ls()) # clear workspace
ReInstallSCA="NO"
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
#install_github("parveendabas/SCA", force = T)
install_github("parveendabas/SCA")
library(SCA)
load_Packages_SeuratAnalysis()
?Perform_DGE_ONEvsALL
source("/tier2/bolcun-filas-lab/PK/Scripts/Functions_Use_Any_Script.R")
source("/tier2/bolcun-filas-lab/PK/Scripts/Scripts_Ewalina/Functions_Ewelina_Project.R")
ClusOrder <- ClusOrderFrom1; ClusOrder
CTOrder <- c("Undiff_1", "Undiff_2", "Undiff_4", "Endo_1", "Endo_2", "Endo_4", "Endo_6", "Meso_1", "Meso_2", "Meso_4", "Meso_6", "TE_1", "TE_2", "TE_4", "TE_6"); ClusOrder
CTPalette <- c("#00008b", "#0000ee", "#87ceff",
"#cdad00", "#ffd700", "#FFFF00", "#eee685",
"#8b0000", "#cd5b45", "#ff0000", "#ff7f50",
"#008b00", "#6b8e23", "#00ff00", "#c1ffc1")
avg_logFC=log(1.5);
avg_log2FC=avg_logFC
FDR=0.1
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_iPSC/Functions_Ewelina_Project.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Ewalina/Functions_Ewelina_Project.R")
ClusOrder <- ClusOrderFrom1; ClusOrder
CTOrder <- c("Undiff_1", "Undiff_2", "Undiff_4", "Endo_1", "Endo_2", "Endo_4", "Endo_6", "Meso_1", "Meso_2", "Meso_4", "Meso_6", "TE_1", "TE_2", "TE_4", "TE_6"); ClusOrder
CTPalette <- c("#00008b", "#0000ee", "#87ceff",
"#cdad00", "#ffd700", "#FFFF00", "#eee685",
"#8b0000", "#cd5b45", "#ff0000", "#ff7f50",
"#008b00", "#6b8e23", "#00ff00", "#c1ffc1")
avg_logFC=log(1.5);
avg_log2FC=avg_logFC
FDR=0.1
pkWD <- "/tier2/bolcun-filas-lab/PK/RStudio_Data/Ewelina/RNA-seq"
?Doublet_Detection_Mouse
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input"
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input"
#RDSdir <- paste0("/Users/kumarpa/Desktop/Work/Jax/Cube/Mingyang/Diabetes_Paper/2016 Yanai Cell Systems/GSE84133_RAW/Human/Human_Pancreas/Data_Input/Human_Pancreas")
#RDSname <- "Only_Raw_Human_Pancreas"
FoldChangeCutoff=1.5
FDR=0.1
avg_logFC=log(1.5);
avg_log2FC=avg_logFC
FDR=0.1
ColToUse="RNA_snn_res.0.1"
GroupName = "Lineage"
projectname="iPSC_Neuron"
OutputName <- paste0(projectname,"_Batch_Correction")
OutputName1 <- OutputName
CCAdimension=25
FeatureUseInCCA=2500
featureForCCAInd=2500
ResToUse=0.3
VarName="vst"
method="Harmony"
OutName <- "CCA_Oocyte_B1"
NameInpdf="CCA_Oocyte_B1"
GroupName="orig.ident"
Lineage="TE"
setwd(pkWD)
plotWD <- paste(getwd(),paste0(OutName),sep="/"); print(plotWD)
setwd(pkWD)
plotWD <- paste(getwd(),paste0("Analysis_",OutputName),sep="/"); print(plotWD11)
plotWD <- paste(getwd(),paste0("Analysis_",OutputName),sep="/"); print(plotWD)
projectname="Oocyte_Batch1_Only "
OutputName <- paste0(projectname,"_Batch_Correction")
OutputName1 <- OutputName
setwd(pkWD)
plotWD <- paste(getwd(),paste0("Analysis_",OutputName),sep="/"); print(plotWD)
dir.create(file.path(getwd(),paste0("Analysis_",OutputName)), showWarnings = FALSE)
Sampleall.object=list()
sample.Names <- c("WT_BL6_NonIR_B1", "WT_BL6_IR_B1", "Chk2KO_NonIR_B1", "Chk2KO_IR_B1")
i=1
#i=1
name=sample.Names[i]
Sample <- name; Sample
print(paste0("Processing sample ",i,": ",name, " of ",length(sample.Names)," samples"))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
i=1
#i=1
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
FeatureNum
FeatureNum=2500
#i=1
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = FeatureNum, save = FALSE, Species = "mmu")
dev.off()
?Read10X_Norm
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = FeatureNum, mingenes=1500, save = FALSE, Species = "mmu")
?Doublet_Detection_DF_DD
Doublet_Detection_DF_DD(SCdata, saveDIR, Sample, FeatureUseCount = FeatureNum, PCAnum = 10, plotCCgene = FALSE, Species = "mmu")
Doublet_Detection_DF_DD(SCdata, saveDIR, Sample, FeatureUseCount = FeatureNum, PCAnum = 10, Species = "mmu")
Doublet_Detection_DF_DD
library(DoubletDecon)
library(DoubletFinder)
setwd(saveDIR)
DDdir <- paste(getwd(), paste0("Doublet_Detection_", Sample),
sep = "/")
DDdir
print(DDdir)
dir.create(file.path(getwd(), paste0("Doublet_Detection_",
Sample)), showWarnings = FALSE)
print(paste0("PrePorocessing data before running Doublet Detection Algorithms for: ",
Sample))
setwd(DDdir)
print(paste0("Loading Seurat object for: ", name))
Species
SeuratObject=SCdata
saveDIR=saveDIR
Sample=Sample
Species = "mmu"
FeatureUseCount = FeatureNum
PCAnum = 10
resClus = 0.5
ClusPallette = ClusPallette
DoubletFinder = TRUE
DoubletDecon = TRUE
library(DoubletDecon)
library(DoubletFinder)
setwd(saveDIR)
DDdir <- paste(getwd(), paste0("Doublet_Detection_", Sample),
sep = "/")
print(DDdir)
dir.create(file.path(getwd(), paste0("Doublet_Detection_",
Sample)), showWarnings = FALSE)
print(paste0("PrePorocessing data before running Doublet Detection Algorithms for: ",
Sample))
setwd(DDdir)
print(paste0("Loading Seurat object for: ", name))
if (Species == "hsa") {
print("Counting MT % for Human")
SeuratObject[["percent.mt"]] <- PercentageFeatureSet(SeuratObject,
pattern = "^MT-")
}
if (Species == "hsa") {
print("Counting MT % for Human")
SeuratObject[["percent.mt"]] <- PercentageFeatureSet(SeuratObject,
pattern = "^MT-")
} else {
print("Counting MT % for Mouse")
SeuratObject[["percent.mt"]] <- PercentageFeatureSet(SeuratObject,
pattern = "^mt-")
}
p1 <- VlnPlot(SeuratObject, features = c("nFeature_RNA",
"nCount_RNA", "percent.mt"), cols = ClusPallette,
pt.size = 0, ncol = 1)
print(p1)
dev.off()
dev.off()
p1 <- VlnPlot(SeuratObject, features = c("nFeature_RNA",
"nCount_RNA", "percent.mt"), cols = ClusPallette,
pt.size = 0, ncol = 1)
print(p1)
plot1 <- FeatureScatter(SeuratObject, feature1 = "nCount_RNA",
feature2 = "percent.mt", cols = ClusPallette)
plot2 <- FeatureScatter(SeuratObject, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA", cols = ClusPallette)
print(CombinePlots(plots = list(plot1, plot2)))
SeuratObject <- FindVariableFeatures(SeuratObject, selection.method = "vst",
nfeatures = FeatureUseCount)
top10 <- head(VariableFeatures(SeuratObject), 10)
plot1 <- VariableFeaturePlot(SeuratObject)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
print(CombinePlots(plots = list(plot1, plot2)))
SeuratObject <- ScaleData(SeuratObject)
SeuratObject <- RunPCA(SeuratObject)
print(ElbowPlot(SeuratObject))
print(ElbowPlot(SeuratObject, ndims = 50))
print(DimHeatmap(SeuratObject, dims = 1:12, cells = 500,
balanced = TRUE))
SeuratObject <- FindNeighbors(SeuratObject, dims = 1:PCAnum)
SeuratObject <- FindClusters(SeuratObject, resolution = resClus)
Idents(object = SeuratObject) <- "seurat_clusters"
p1 <- VlnPlot(SeuratObject, features = c("nFeature_RNA",
"nCount_RNA", "percent.mt"), cols = ClusPallette,
pt.size = 0, ncol = 1)
print(p1)
SeuratObject <- RunUMAP(SeuratObject, dims = 1:PCAnum)
print(DimPlot(SeuratObject, reduction = "umap", label = TRUE,
label.size = 8, pt.size = 0.5, cols = ClusPallette) +
ggtitle(paste0(Sample, " (", nrow(SeuratObject@meta.data),
" cells)")))
dev.off()
DoubletFinder
setwd(DDdir)
DoubletFinderDir <- paste(getwd(), paste0("DoubletFinder_",
Sample), sep = "/")
print(DoubletFinderDir)
dir.create(file.path(getwd(), paste0("DoubletFinder_",
Sample)), showWarnings = FALSE)
setwd(DoubletFinderDir)
print(paste0("Started DoubletFinder process for ", Sample,
" using PCA ", PCAnum))
sweep.res.list_SeuratObject <- paramSweep_v3(SeuratObject,
PCs = 1:PCAnum, sct = FALSE)
sweep.stats_SeuratObject <- summarizeSweep(sweep.res.list_SeuratObject,
GT = FALSE)
bcmvn_SeuratObject <- find.pK(sweep.stats_SeuratObject)
homotypic.prop <- modelHomotypic(SeuratObject$seurat_clusters)
nExp_poi <- round(0.075 * length(colnames(x = SeuratObject)))
nExp_poi
nExp_poi.adj <- round(nExp_poi * (1 - homotypic.prop))
nExp_poi.adj
print("Finished Doublet Finder steps")
## Run DoubletFinder with varying classification stringencies ----------------------------------------------------------------
SeuratObject <- doubletFinder_v3(SeuratObject, PCs = 1:PCAnum, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
head(SeuratObject@meta.data)
colnames(SeuratObject@meta.data)[colnames(SeuratObject@meta.data) %like% 'pANN_'] <- "pANNcomputed"
colnames(SeuratObject@meta.data)[colnames(SeuratObject@meta.data) %like% 'DF.classifications_'] <- "Doublet_LowConf"
head(SeuratObject@meta.data)
SeuratObject <- doubletFinder_v3(SeuratObject, PCs = 1:PCAnum, pN = 0.25, pK = 0.09, nExp = nExp_poi.adj, reuse.pANN = "pANNcomputed", sct = FALSE)
head(SeuratObject@meta.data)
colnames(SeuratObject@meta.data)[colnames(SeuratObject@meta.data) %like% 'DF.classifications_'] <- "Doublet_HighConf"
head(SeuratObject@meta.data)
table(SeuratObject@meta.data$Doublet_LowConf)
table(SeuratObject@meta.data$Doublet_HighConf)
table(SeuratObject@meta.data$Doublet_LowConf, SeuratObject@meta.data$Doublet_HighConf)
SeuratObject@meta.data$DoubletFinder <- SeuratObject@meta.data$Doublet_LowConf
SeuratObject@meta.data[SeuratObject@meta.data$Doublet_LowConf == "Doublet", "DoubletFinder"] <- "Doublet_LowConf"
table(SeuratObject@meta.data$DoubletFinder)
SeuratObject@meta.data[SeuratObject@meta.data$Doublet_HighConf == "Doublet", "DoubletFinder"] <- "Doublet_HighConf"
print(table(SeuratObject@meta.data$DoubletFinder))
head(SeuratObject@meta.data)
cutoff.df <- data.frame(Doublets = table(SeuratObject@meta.data$DoubletFinder)); cutoff.df
TableDF <- cutoff.df
FontsDF <- c(2.5,2.5,2.5)
titleDF <- paste0(Sample,": Doublets Detected")
func.PlotTable.General(TableDF, FontsDF, titleDF, 20)
print(Create_Table(SeuratObject, BeforeFilter=0))
dev.off()
Species
print("Plotted Table")
p1 <- DimPlot(object = SeuratObject, reduction = "umap", group.by = "seurat_clusters", label = TRUE, repel = TRUE, cols = ClusPallette)
p2 <- DimPlot(object = SeuratObject, reduction = "umap", group.by = "DoubletFinder", pt.size=1.5, cols=c("red", "dodgerblue", "black"))
print(plot_grid(p1, p2, NULL))
dev.off()
write.table(SeuratObject@meta.data,file=paste0("Doublets_Detected_",Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt"),quote=F,sep="\t")
DoubletCells <- SeuratObject@meta.data[SeuratObject@meta.data$DoubletFinder != "Singlet",]; dim(DoubletCells)
head(DoubletCells)
write.table(DoubletCells,file=paste0("Discarded_Cells_",OutName,Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt"),quote=F,sep="\t")
setwd(DDdir)
DoubletDeconDir <- paste(getwd(),paste0("DoubletDecon_",Sample),sep="/"); print(DoubletDeconDir)
dir.create(file.path(getwd(),paste0("DoubletDecon_",Sample)), showWarnings = FALSE)
setwd(DoubletDeconDir)
## find markers for every cluster compared to all remaining cells, report only the positive ones
Idents(object = SeuratObject) <- "seurat_clusters"
#SeuratObject <- subset(SeuratObject, downsample=100)
#SeuratObject.markers <- FindAllMarkers(SeuratObject, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
#top10 <- SeuratObject.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
##DoHeatmap(SeuratObject, features = top10$gene) + NoLegend()
#top50 <- SeuratObject.markers %>% group_by(cluster) %>% top_n(n = 50, wt = avg_logFC)
#write.table(top50,paste0("Top50_DGEs_",OutName,NameInpdf,"_Doublets_Detected_",Sample,".txt"),quote=F,sep="\t")
print(paste0("Completed Marker identification for sample ",Sample, " using PCA ",PCAnum))
newFiles <- Improved_Seurat_Pre_Process(SeuratObject, num_genes=50, write_files=FALSE)
filename=paste0(Sample,"_PCA",PCAnum)
setwd(DoubletDeconDir)
write.table(newFiles$newExpressionFile, paste0(filename, "_expression.txt"), sep="\t")
#write.table(newFiles$newFullExpressionFile, paste0(filename, "_fullExpression.txt"), sep="\t")
write.table(newFiles$newGroupsFile, paste0(filename , "_groups.txt"), sep="\t", col.names = F)
results=Main_Doublet_Decon(rawDataFile=newFiles$newExpressionFile,
groupsFile=newFiles$newGroupsFile,
filename=filename,
location=DoubletDeconDir,
fullDataFile=NULL,
removeCC=FALSE,
species=Species,
rhop=1.1,
write=TRUE,
PMF=TRUE,
useFull=FALSE,
heatmap=FALSE,
centroids=TRUE,
num_doubs=100,
only50=FALSE,
min_uniq=4,
nCores=1)
print("Finished Doublet Decon steps")
dev.off()
head(results$Final_doublets_groups); dim(results$Final_doublets_groups)
SeuratObject@meta.data$DoubletDecon <- "Singlet"
#SeuratObject@meta.data[rownames(results$Final_doublets_groups),"DoubletDecon"] <- "Doublet"
SeuratObject@meta.data[gsub("\\.","-",rownames(results$Final_doublets_groups)),"DoubletDecon"] <- "Doublet"
head(SeuratObject@meta.data)
table(SeuratObject@meta.data$DoubletDecon)
table(SeuratObject@meta.data$DoubletDecon, SeuratObject@meta.data$seurat_clusters)
temp <- results$DRS_doublet_table
rownames(temp) <- gsub("\\.","-",rownames(temp))
temp$DoubletDecon <- temp$isADoublet
temp$DoubletDecon <- gsub("FALSE","Singlet",temp$DoubletDecon)
temp$DoubletDecon <- gsub("TRUE","Doublet",temp$DoubletDecon)
write.table(temp,file=paste0("Doublets_Detected_",Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt"),quote=F,sep="\t")
DoubletCells <- temp[temp$DoubletDecon != "Singlet",]; dim(DoubletCells)
head(DoubletCells)
write.table(DoubletCells,file=paste0("Discarded_Cells_",OutName,Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt"),quote=F,sep="\t")
TableDF <- as.data.frame.matrix(table(SeuratObject@meta.data$seurat_clusters, SeuratObject@meta.data$DoubletDecon))
TableDF$DoubPerc <- round((TableDF$Doublet/(TableDF$Doublet+TableDF$Singlet)*100),2)
FontsDF <- c(2.1,2.1,2.1)
titleDF <- paste0(Sample)
func.PlotTable.withRowNames.General(TableDF, FontsDF, titleDF, 15)
p1 <- DimPlot(SeuratObject, label = TRUE, label.size = 6, cols = ClusPallette)
p2 <- DimPlot(SeuratObject, label = TRUE, label.size = 5, group.by = "DoubletDecon")
p3 <- FeaturePlot(SeuratObject, features = "Ooep")
p4 <- FeaturePlot(SeuratObject, features = "Zp3")
print(plot_grid(p1, p2, p3, p4, ncol = 2))
dev.off()
print("Comparing Doublet Finder and Decon Algorithms")
Sample
#setwd(plotWD)
setwd(DoubletFinderDir)
DoubletfromFinder <- read.table(file = paste0("Discarded_Cells_",OutName,Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt")); head(DoubletfromFinder); dim(DoubletfromFinder)
setwd(DoubletDeconDir)
DoubletfromDecon <- read.table(file = paste0("Discarded_Cells_",OutName,Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt")); head(DoubletfromDecon); dim(DoubletfromDecon)
head(DoubletfromFinder); dim(DoubletfromDecon)
common <- intersect(rownames(DoubletfromFinder), rownames(DoubletfromDecon)); length(common)
setwd(DDdir)
SeuratObject@meta.data$DoubletfromFinder <- "Singlet"
SeuratObject@meta.data[rownames(DoubletfromFinder),"DoubletfromFinder"] <- "Doublet"
SeuratObject@meta.data$DoubletfromDecon <- "Singlet"
SeuratObject@meta.data[rownames(DoubletfromDecon),"DoubletfromDecon"] <- "Doublet"
SeuratObject@meta.data$DoubletDeconFinder <- "Singlet"
SeuratObject@meta.data[common,"DoubletDeconFinder"] <- "Doublet"
write.table(SeuratObject@meta.data,file=paste0("Comparison_DoubletDeconFinder_Doublets_Detected_",Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt"),quote=F,sep="\t")
print("Completed Comparing Doublet Finder and Decon Algorithms")
setwd(DDdir)
table(SeuratObject@meta.data$DoubletfromFinder)
p1 <- DimPlot(SeuratObject, label.size = 6, group.by = "DoubletfromFinder") + ggtitle(paste0("DoubletfromFinder"))
table(SeuratObject@meta.data$DoubletfromDecon)
p2 <- DimPlot(SeuratObject, label.size = 6, group.by = "DoubletfromDecon") + ggtitle(paste0("DoubletfromDecon"))
table(SeuratObject@meta.data$DoubletDeconFinder)
p3 <- DimPlot(SeuratObject, label.size = 6, group.by = "DoubletDeconFinder") + ggtitle(paste0("Doublet_Decon_and_Finder"))
p4 <- FeaturePlot(SeuratObject, features = "Ooep")
print(plot_grid(p1, p2, p3, p4, ncol = 2))
dev.off()
paste0("Comparison_DoubletFinder_Doublets_Detected_",
Sample, "_using_PCA_", PCAnum, "_res_", resClus,
".txt")
head(SeuratObject@meta.data)
cutoff.df <- data.frame(Doublets = table(SeuratObject@meta.data$DoubletFinder)); print(cutoff.df)
TableDF <- cutoff.df
FontsDF <- c(2.5,2.5,2.5)
titleDF <- paste0(Sample,": Doublets Detected")
func.PlotTable.General(TableDF, FontsDF, titleDF, 20)
Create_Table(SeuratObject, BeforeFilter=0)
dev.off()
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
detach(package:SCA)
library(devtools)
#install_github("parveendabas/SCA", force = T)
install_github("parveendabas/SCA")
