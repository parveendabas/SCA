setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
?FindVariableFeatures
rm(list=ls()) # clear workspace
library(ggplot2)
#sampleNames <- c("Output_cpdb_Test_May13")
PatientNames <- c("CNSTM-")
rm(list=ls()) # clear workspace
### cellphonedb plot dot_plot --rows in/rows.txt --columns in/columns.txt
library(ggplot2)
#setwd()
#sampleNames <- c("Output_cpdb_Test_May13")
PatientNames <- c("CNSTM-")
#sampleNames <- c("Output_cpdb_CNSTM-070-D", "Output_cpdb_CNSTM-070-F", "Output_cpdb_CNSTM-081-A", "Output_cpdb_CNSTM-096-1", "Output_cpdb_CNSTM-096-2", "Output_cpdb_CNSTM-096-4", "Output_cpdb_CNSTM-096-5")
#ColsToRemove=c("Glioma|Glioma", "Myeloid|Myeloid", "Tcells|Tcells")
#ColsToRemove=c("")
InteractionType="PatientALL"
#InteractionType="Sig_InterationsOnly_PatientWise"
print(paste0("Plotting InteractionType: ",InteractionType))
PatientDir <- paste0("/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/CellCellComm/cpdb"); PatientDir
setwd(PatientDir)
plotWD <- paste(getwd(),paste0("Separate_CTs_Test"),sep="/"); print(plotWD)
dir.create(file.path(getwd(),paste0("Separate_CTs_Test")), showWarnings = FALSE)
PatientNames
Patient="CNSTM-"
Log2MeanCutoff=0
setwd(plotWD)
plotWD11 <- paste(getwd(),paste0("Log2Mean_Above_",Log2MeanCutoff,"_Separate_CTs_",Patient),sep="/"); print(plotWD11)
dir.create(file.path(getwd(),paste0("Log2Mean_Above_",Log2MeanCutoff,"_Separate_CTs_",Patient)), showWarnings = FALSE)
sampleNames=dir(path = PatientDir, pattern = paste0("Output_cpdb_*",Patient,".*$")); sampleNames
CellCount="Analysis_cpdb_ALLcells_per_CT"
#CellCount="Analysis_cpdb_ALLcells_per_CT"
print(paste0("Processing CellCount: ",CellCount))
for(pvalcutoff in c(0.01)){
##pvalcutoff=0.01
if(pvalcutoff==0.05){
fdrcutoff=0.1
} else if(pvalcutoff==0.01){
fdrcutoff=0.01
}
print(paste0("Processig for pval-cutoff:", pvalcutoff, "  and fdr-cutoff:", fdrcutoff))
#CTlist=c("Glioma|Myeloid", "Myeloid|Glioma")
CTlist=c("Glioma|Glioma", "Glioma|Myeloid", "Glioma|Oligo", "Glioma|Pericytes", "Glioma|Tcells",  "Myeloid|Glioma", "Myeloid|Myeloid", "Myeloid|Oligo", "Myeloid|Pericytes", "Myeloid|Tcells",  "Oligo|Glioma", "Oligo|Myeloid", "Oligo|Oligo", "Oligo|Pericytes", "Oligo|Tcells",  "Pericytes|Glioma", "Pericytes|Myeloid", "Pericytes|Oligo", "Pericytes|Pericytes", "Pericytes|Tcells",  "Tcells|Glioma", "Tcells|Myeloid", "Tcells|Oligo", "Tcells|Pericytes", "Tcells|Tcells")
for(CTuse in CTlist){
#CTuse="Glioma|Myeloid"
pval.list=list(); fdr.list=list();  mean.list=list(); mean.list.ORI=list(); pval.list.ORI=list();
for(sample in sampleNames){
#sample="Output_cpdb_CNSTM-096-1"
print(paste0("Processing sample: ",sample))
pkWD <- paste0("/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/CellCellComm/cpdb/",sample,"/",CellCount); pkWD
setwd(pkWD)
#selected_rows = NULL
#selected_columns = NULL
#selected_columns=c("Glioma|Myeloid", "Glioma|Tcells", "Myeloid|Glioma", "Myeloid|Tcells", "Tcells|Glioma", "Tcells|Myeloid")
#selected_columns=c("Glioma|Glioma", "Glioma|Myeloid", "Glioma|Tcells", "Myeloid|Glioma", "Myeloid|Myeloid", "Myeloid|Tcells", "Tcells|Glioma", "Tcells|Myeloid", "Tcells|Tcells")
means_path = './means.txt'
pvalues_path = './pvalues.txt'
significant_means_path='./significant_means.txt'
means_separator = '\t'
pvalues_separator = '\t'
all_pval.Full = read.table(pvalues_path, header=T, stringsAsFactors = F, sep=means_separator, comment.char = '', check.names=F); print(dim(all_pval.Full))
all_pval.Full <- all_pval.Full[!duplicated(all_pval.Full$interacting_pair),]
rownames(all_pval.Full) <- all_pval.Full$interacting_pair; head(all_pval.Full)
all_pval <- all_pval.Full
intr_pairs = all_pval$interacting_pair; length(intr_pairs)
all_pval = all_pval[,-c(1:11)]
selected_columns = colnames(all_pval)
#selected_columns = selected_columns[!selected_columns %in% ColsToRemove]; selected_columns
selected_columns = selected_columns[selected_columns %in% paste0(CTuse)]; selected_columns
all_pval <- all_pval[,selected_columns, drop=FALSE]; head(all_pval)
sig_pval_intr_pairs <- rownames(all_pval[rowSums(all_pval<=pvalcutoff)>0,,drop=FALSE]); length(sig_pval_intr_pairs)
#all_fdr <- t(apply(temp.pval, 1, function(x){ print("Processing entry:"); print(x); p.adjust(x, method = "BH")}))
#all_fdr <- t(apply(all_pval, 1, function(x){ p.adjust(x, method = "BH")}))
#sig_fdr_intr_pairs <- rownames(all_fdr[rowSums(all_fdr<=fdrcutoff)>0,]); length(sig_fdr_intr_pairs)
#all_pval <- all_pval[,selected_columns]; head(all_pval)
#all_fdr <- all_fdr[,selected_columns]; head(all_fdr)
all_means = read.table(means_path, header=T, stringsAsFactors = F, sep=pvalues_separator, comment.char = '', check.names=F); print(dim(all_means))
all_means <- all_means[!duplicated(all_means$interacting_pair),]
rownames(all_means) <- all_means$interacting_pair; head(all_means)
all_means = all_means[,-c(1:11)]
all_means <- all_means[,selected_columns,drop=FALSE]; head(all_means)
all_means.Full <- all_means
if(length(sig_pval_intr_pairs) > 0){
sig_means = read.table(means_path, header=T, stringsAsFactors = F, sep=pvalues_separator, comment.char = '', check.names=F); print(dim(sig_means))
sig_means <- sig_means[!duplicated(sig_means$interacting_pair),]
rownames(sig_means) <- sig_means$interacting_pair; head(sig_means)
sig_means = sig_means[,-c(1:11)]; head(sig_means)
sig_means<- sig_means[,selected_columns,drop=FALSE]; head(sig_means)
sig_means$Log2Mean <- log2(sig_means[,CTuse]);
sig_means <- sig_means[sig_means$Log2Mean > Log2MeanCutoff,]; head(sig_means); dim(sig_means)
sig_means$Log2Mean <- NULL
sig_means$sum <- rowSums(sig_means); head(sig_means)
discarded_rows <- rownames(sig_means[sig_means$sum<=0,]); head(discarded_rows); length(discarded_rows)
Temp_selected_rows <- rownames(sig_means[sig_means$sum>0,]); head(Temp_selected_rows); length(Temp_selected_rows)
selected_rows_pval <- intersect(Temp_selected_rows, sig_pval_intr_pairs); length(selected_rows_pval)
#selected_rows_fdr <- intersect(Temp_selected_rows, sig_fdr_intr_pairs); length(selected_rows_fdr)
###selected_rows <- rev(selected_rows)
colnames(all_pval) <- paste0(colnames(all_pval),"|", gsub("Output_cpdb_","", sample))
all_pval <- all_pval[selected_rows_pval,,drop=FALSE]
all_pval$LR <- rownames(all_pval)
pval.list[[sample]] <- all_pval
#colnames(all_fdr) <- paste0(colnames(all_fdr),"|", gsub("Output_cpdb_","", sample))
#all_fdr <- as.data.frame(all_fdr[selected_rows_fdr,])
#all_fdr$LR <- rownames(all_fdr)
#fdr.list[[sample]] <- all_fdr
colnames(all_means) <- paste0(colnames(all_means),"|", gsub("Output_cpdb_","", sample))
all_means$LR <- rownames(all_means)
mean.list[[sample]] <- all_means
} else {
print(paste0("No interactions found in sample: ",sample, " for interaction: ",CTuse))
print(paste0("*************************"))
Sys.sleep(0.5)
print("Using empty data.frame")
all_pval <- data.frame(A=as.numeric(),B=as.character()); colnames(all_pval) <- c(paste0(CTuse,"|",gsub("Output_cpdb_","", sample)), "LR")
pval.list[[sample]] <- all_pval
all_means <- all_pval
mean.list[[sample]] <- all_means
}
if(length(selected_columns) > 0){
print("Filling Full data.frames")
all_pval.Full <- all_pval.Full[,selected_columns,drop=FALSE]
colnames(all_pval.Full) <- paste0(colnames(all_pval.Full),"|", gsub("Output_cpdb_","", sample))
all_pval.Full$LR <- rownames(all_pval.Full); head(all_pval.Full)
pval.list.ORI[[sample]] <- all_pval.Full
all_means.Full <- all_means.Full[,selected_columns,drop=FALSE]
colnames(all_means.Full) <- paste0(colnames(all_means.Full),"|", gsub("Output_cpdb_","", sample))
all_means.Full$LR <- rownames(all_means.Full)
mean.list.ORI[[sample]] <- all_means.Full; head(all_means.Full)
print("Done Filling Full data.frames")
} else {
print(paste0("No Columns itself found in sample: ",sample, " for interaction: ",CTuse))
Sys.sleep(0.3)
print("Using empty data.frame for Full")
all_pval.Full <- data.frame(A=as.numeric(),B=as.character()); colnames(all_pval.Full) <- c(paste0(CTuse,"|",gsub("Output_cpdb_","", sample)), "LR")
pval.list.ORI[[sample]] <- all_pval.Full
all_means.Full <- all_pval.Full
mean.list.ORI[[sample]] <- all_means.Full
}
}
### Both the options work
#chk <- Reduce(function(x, y) merge(x, y, by = "id", all=TRUE), list(df1, df2, df3)); chk
#chk1 <- Reduce(function(x, y) merge(x, y, by = "id", all=TRUE), df.list); chk1
#chk1 <-  Reduce(function(...) merge(..., by = "id", all=TRUE), df.list)
print(paste0("Merging ",length(sampleNames), " data frames"))
### Both the options work
#all_pval_patient <- merge(merge(merge(pval.list[[1]], pval.list[[2]], by = "LR", all = TRUE),  pval.list[[3]], by = "LR", all = TRUE), pval.list[[4]], by = "LR", all = TRUE)
CombinedLRs <- Reduce(function(...) merge(..., by = "LR", all=TRUE), pval.list)
all_pval_patient <- Reduce(function(...) merge(..., by = "LR", all=TRUE), pval.list.ORI)
rownames(all_pval_patient) <- all_pval_patient$LR
all_pval_patient <- all_pval_patient[CombinedLRs$LR,]
#all_pval_patient1 <- Reduce(function(...) merge(..., all=TRUE), pval.list)
all_mean_patient <- Reduce(function(...) merge(..., by = "LR", all=TRUE), mean.list.ORI)
rownames(all_mean_patient) <- all_mean_patient$LR
all_mean_patient <- all_mean_patient[CombinedLRs$LR,]
#all_fdr_patient <- merge(merge(merge(fdr.list[[1]], fdr.list[[2]], by = "LR", all = TRUE),  fdr.list[[3]], by = "LR", all = TRUE), fdr.list[[4]], by = "LR", all = TRUE)
rownames(all_pval_patient) <- all_pval_patient$LR; all_pval_patient$LR <- NULL; head(all_pval_patient,1)
selected_rows_pval <- rownames(all_pval_patient)
head(all_pval_patient,1); dim(all_pval_patient)
#rownames(all_fdr_patient) <- all_fdr_patient$LR; all_fdr_patient$LR <- NULL
#selected_rows_fdr <- rownames(all_fdr_patient)
rownames(all_mean_patient) <- all_mean_patient$LR; all_mean_patient$LR <- NULL; head(all_mean_patient,1)
selected_rows_mean <- rownames(all_mean_patient)
head(all_mean_patient,1); dim(all_mean_patient)
ColsOrder <- sort(colnames(all_pval_patient))
all_pval_patient <- all_pval_patient[,ColsOrder]
#all_fdr_patient <- all_fdr_patient[,ColsOrder]
all_mean_patient <- all_mean_patient[,ColsOrder]
PlotPval="YES"
if(PlotPval=="YES"){
setwd(plotWD11)
pdf(file=paste0("Plotting_",Patient,"ALL_",CellCount,"_",InteractionType,"_pval_based_",pvalcutoff,"_",CTuse,"_Log2mean_above_",Log2MeanCutoff,"_Total_",length(selected_rows_pval),"_Pairs.pdf"),height = 12,width = 14)
set <- split(selected_rows_pval, ceiling(seq_along(selected_rows_pval)/50)); length(set)
selected_columns=colnames(all_pval_patient)
intr_pairs=rownames(all_pval_patient)
for(i in 1:length(set)){
#i=1
print(paste0("Set no. ",i," of total ",length(set)," sets"))
Plot_rows <- c(set[[i]]); head(Plot_rows); length(Plot_rows)
all_mean_patient.temp=all_mean_patient[intr_pairs,]
all(rownames(all_pval_patient)==rownames(all_mean_patient.temp))
sel_pval = all_pval_patient[match(Plot_rows, intr_pairs), selected_columns]
sel_means = all_mean_patient.temp[match(Plot_rows, intr_pairs), selected_columns]
df_names = expand.grid(Plot_rows, selected_columns)
pval = unlist(sel_pval)
pval[pval==0] = 0.0009
plot.data = cbind(df_names,pval)
pr = unlist(as.data.frame(sel_means))
pr[pr==0] = 1
plot.data = cbind(plot.data,log2(pr))
#plot.data = cbind(plot.data,(pr))
colnames(plot.data) = c('pair', 'clusters', 'pvalue', 'mean')
print(dim(plot.data))
head(plot.data)
my_palette <- colorRampPalette(c("black", "blue", "yellow", "red"), alpha=TRUE)(n=399)
print(ggplot(plot.data,aes(x=clusters,y=pair)) +
geom_point(aes(size=-log10(pvalue),color=mean)) +
scale_color_gradientn('Log2 mean (Molecule 1, Molecule 2)', colors=my_palette) +
scale_x_discrete(position = "top") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text=element_text(size=10, colour = "black"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size=10, colour = "black"),
axis.title=element_blank(),
panel.border = element_rect(size = 0.7, linetype = "solid", colour = "black")))
}
dev.off()
selected_rows_pval
head(all_pval_patient)
write.table(all_pval_patient[selected_rows_pval,selected_columns],file=paste0("Details_",Patient,"ALL_",CellCount,"_",InteractionType,"_pval_based_",pvalcutoff,"_",CTuse,"_Log2mean_above_",Log2MeanCutoff,"_Total_",length(selected_rows_pval),"_Pairs.txt"),row.names=T,quote=F,sep="\t")
}
## CTlist
}
## pvalcutoff
}
dev.off()
rm(list=ls()) # clear workspace
### cellphonedb plot dot_plot --rows in/rows.txt --columns in/columns.txt
library(ggplot2)
#setwd()
#sampleNames <- c("Output_cpdb_Test_May13")
PatientNames <- c("CNSTM-")
#sampleNames <- c("Output_cpdb_CNSTM-070-D", "Output_cpdb_CNSTM-070-F", "Output_cpdb_CNSTM-081-A", "Output_cpdb_CNSTM-096-1", "Output_cpdb_CNSTM-096-2", "Output_cpdb_CNSTM-096-4", "Output_cpdb_CNSTM-096-5")
#ColsToRemove=c("Glioma|Glioma", "Myeloid|Myeloid", "Tcells|Tcells")
#ColsToRemove=c("")
InteractionType="PatientALL"
#InteractionType="Sig_InterationsOnly_PatientWise"
print(paste0("Plotting InteractionType: ",InteractionType))
PatientDir <- paste0("/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/CellCellComm/cpdb"); PatientDir
setwd(PatientDir)
plotWD <- paste(getwd(),paste0("Separate_CTs_Test"),sep="/"); print(plotWD)
dir.create(file.path(getwd(),paste0("Separate_CTs_Test")), showWarnings = FALSE)
Patient="CNSTM-"
Log2MeanCutoff=0
setwd(plotWD)
plotWD11 <- paste(getwd(),paste0("Log2Mean_Above_",Log2MeanCutoff,"_Separate_CTs_",Patient),sep="/"); print(plotWD11)
dir.create(file.path(getwd(),paste0("Log2Mean_Above_",Log2MeanCutoff,"_Separate_CTs_",Patient)), showWarnings = FALSE)
sampleNames=dir(path = PatientDir, pattern = paste0("Output_cpdb_*",Patient,".*$")); sampleNames
CellCount="Analysis_cpdb_ALLcells_per_CT"
print(paste0("Processing CellCount: ",CellCount))
pvalcutoff=0.01
if(pvalcutoff==0.05){
fdrcutoff=0.1
} else if(pvalcutoff==0.01){
fdrcutoff=0.01
}
print(paste0("Processig for pval-cutoff:", pvalcutoff, "  and fdr-cutoff:", fdrcutoff))
#CTlist=c("Glioma|Myeloid", "Myeloid|Glioma")
CTlist=c("Glioma|Glioma", "Glioma|Myeloid", "Glioma|Oligo", "Glioma|Pericytes", "Glioma|Tcells",  "Myeloid|Glioma", "Myeloid|Myeloid", "Myeloid|Oligo", "Myeloid|Pericytes", "Myeloid|Tcells",  "Oligo|Glioma", "Oligo|Myeloid", "Oligo|Oligo", "Oligo|Pericytes", "Oligo|Tcells",  "Pericytes|Glioma", "Pericytes|Myeloid", "Pericytes|Oligo", "Pericytes|Pericytes", "Pericytes|Tcells",  "Tcells|Glioma", "Tcells|Myeloid", "Tcells|Oligo", "Tcells|Pericytes", "Tcells|Tcells")
CTuse="Glioma|Myeloid"
pval.list=list(); fdr.list=list();  mean.list=list(); mean.list.ORI=list(); pval.list.ORI=list();
sampleNames
sample="Output_cpdb_CNSTM-096-1"
print(paste0("Processing sample: ",sample))
pkWD <- paste0("/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/CellCellComm/cpdb/",sample,"/",CellCount); pkWD
setwd(pkWD)
means_path = './means.txt'
pvalues_path = './pvalues.txt'
significant_means_path='./significant_means.txt'
means_separator = '\t'
pvalues_separator = '\t'
all_pval.Full = read.table(pvalues_path, header=T, stringsAsFactors = F, sep=means_separator, comment.char = '', check.names=F); print(dim(all_pval.Full))
all_pval.Full <- all_pval.Full[!duplicated(all_pval.Full$interacting_pair),]
rownames(all_pval.Full) <- all_pval.Full$interacting_pair; head(all_pval.Full)
all_pval <- all_pval.Full
intr_pairs = all_pval$interacting_pair; length(intr_pairs)
all_pval = all_pval[,-c(1:11)]
selected_columns = colnames(all_pval)
#selected_columns = selected_columns[!selected_columns %in% ColsToRemove]; selected_columns
selected_columns = selected_columns[selected_columns %in% paste0(CTuse)]; selected_columns
all_pval <- all_pval[,selected_columns, drop=FALSE]; head(all_pval)
sig_pval_intr_pairs <- rownames(all_pval[rowSums(all_pval<=pvalcutoff)>0,,drop=FALSE]); length(sig_pval_intr_pairs)
pval.list=list(); fdr.list=list();  mean.list=list(); mean.list.ORI=list(); pval.list.ORI=list();
for(sample in sampleNames){
#sample="Output_cpdb_CNSTM-096-1"
print(paste0("Processing sample: ",sample))
pkWD <- paste0("/Users/kumarpa/Desktop/Work/Jax/Kyuson/Bill_Pipeline_Data/CellCellComm/cpdb/",sample,"/",CellCount); pkWD
setwd(pkWD)
#selected_rows = NULL
#selected_columns = NULL
#selected_columns=c("Glioma|Myeloid", "Glioma|Tcells", "Myeloid|Glioma", "Myeloid|Tcells", "Tcells|Glioma", "Tcells|Myeloid")
#selected_columns=c("Glioma|Glioma", "Glioma|Myeloid", "Glioma|Tcells", "Myeloid|Glioma", "Myeloid|Myeloid", "Myeloid|Tcells", "Tcells|Glioma", "Tcells|Myeloid", "Tcells|Tcells")
means_path = './means.txt'
pvalues_path = './pvalues.txt'
significant_means_path='./significant_means.txt'
means_separator = '\t'
pvalues_separator = '\t'
all_pval.Full = read.table(pvalues_path, header=T, stringsAsFactors = F, sep=means_separator, comment.char = '', check.names=F); print(dim(all_pval.Full))
all_pval.Full <- all_pval.Full[!duplicated(all_pval.Full$interacting_pair),]
rownames(all_pval.Full) <- all_pval.Full$interacting_pair; head(all_pval.Full)
all_pval <- all_pval.Full
intr_pairs = all_pval$interacting_pair; length(intr_pairs)
all_pval = all_pval[,-c(1:11)]
selected_columns = colnames(all_pval)
#selected_columns = selected_columns[!selected_columns %in% ColsToRemove]; selected_columns
selected_columns = selected_columns[selected_columns %in% paste0(CTuse)]; selected_columns
all_pval <- all_pval[,selected_columns, drop=FALSE]; head(all_pval)
sig_pval_intr_pairs <- rownames(all_pval[rowSums(all_pval<=pvalcutoff)>0,,drop=FALSE]); length(sig_pval_intr_pairs)
#all_fdr <- t(apply(temp.pval, 1, function(x){ print("Processing entry:"); print(x); p.adjust(x, method = "BH")}))
#all_fdr <- t(apply(all_pval, 1, function(x){ p.adjust(x, method = "BH")}))
#sig_fdr_intr_pairs <- rownames(all_fdr[rowSums(all_fdr<=fdrcutoff)>0,]); length(sig_fdr_intr_pairs)
#all_pval <- all_pval[,selected_columns]; head(all_pval)
#all_fdr <- all_fdr[,selected_columns]; head(all_fdr)
all_means = read.table(means_path, header=T, stringsAsFactors = F, sep=pvalues_separator, comment.char = '', check.names=F); print(dim(all_means))
all_means <- all_means[!duplicated(all_means$interacting_pair),]
rownames(all_means) <- all_means$interacting_pair; head(all_means)
all_means = all_means[,-c(1:11)]
all_means <- all_means[,selected_columns,drop=FALSE]; head(all_means)
all_means.Full <- all_means
if(length(sig_pval_intr_pairs) > 0){
sig_means = read.table(means_path, header=T, stringsAsFactors = F, sep=pvalues_separator, comment.char = '', check.names=F); print(dim(sig_means))
sig_means <- sig_means[!duplicated(sig_means$interacting_pair),]
rownames(sig_means) <- sig_means$interacting_pair; head(sig_means)
sig_means = sig_means[,-c(1:11)]; head(sig_means)
sig_means<- sig_means[,selected_columns,drop=FALSE]; head(sig_means)
sig_means$Log2Mean <- log2(sig_means[,CTuse]);
sig_means <- sig_means[sig_means$Log2Mean > Log2MeanCutoff,]; head(sig_means); dim(sig_means)
sig_means$Log2Mean <- NULL
sig_means$sum <- rowSums(sig_means); head(sig_means)
discarded_rows <- rownames(sig_means[sig_means$sum<=0,]); head(discarded_rows); length(discarded_rows)
Temp_selected_rows <- rownames(sig_means[sig_means$sum>0,]); head(Temp_selected_rows); length(Temp_selected_rows)
selected_rows_pval <- intersect(Temp_selected_rows, sig_pval_intr_pairs); length(selected_rows_pval)
#selected_rows_fdr <- intersect(Temp_selected_rows, sig_fdr_intr_pairs); length(selected_rows_fdr)
###selected_rows <- rev(selected_rows)
colnames(all_pval) <- paste0(colnames(all_pval),"|", gsub("Output_cpdb_","", sample))
all_pval <- all_pval[selected_rows_pval,,drop=FALSE]
all_pval$LR <- rownames(all_pval)
pval.list[[sample]] <- all_pval
#colnames(all_fdr) <- paste0(colnames(all_fdr),"|", gsub("Output_cpdb_","", sample))
#all_fdr <- as.data.frame(all_fdr[selected_rows_fdr,])
#all_fdr$LR <- rownames(all_fdr)
#fdr.list[[sample]] <- all_fdr
colnames(all_means) <- paste0(colnames(all_means),"|", gsub("Output_cpdb_","", sample))
all_means$LR <- rownames(all_means)
mean.list[[sample]] <- all_means
} else {
print(paste0("No interactions found in sample: ",sample, " for interaction: ",CTuse))
print(paste0("*************************"))
Sys.sleep(0.5)
print("Using empty data.frame")
all_pval <- data.frame(A=as.numeric(),B=as.character()); colnames(all_pval) <- c(paste0(CTuse,"|",gsub("Output_cpdb_","", sample)), "LR")
pval.list[[sample]] <- all_pval
all_means <- all_pval
mean.list[[sample]] <- all_means
}
if(length(selected_columns) > 0){
print("Filling Full data.frames")
all_pval.Full <- all_pval.Full[,selected_columns,drop=FALSE]
colnames(all_pval.Full) <- paste0(colnames(all_pval.Full),"|", gsub("Output_cpdb_","", sample))
all_pval.Full$LR <- rownames(all_pval.Full); head(all_pval.Full)
pval.list.ORI[[sample]] <- all_pval.Full
all_means.Full <- all_means.Full[,selected_columns,drop=FALSE]
colnames(all_means.Full) <- paste0(colnames(all_means.Full),"|", gsub("Output_cpdb_","", sample))
all_means.Full$LR <- rownames(all_means.Full)
mean.list.ORI[[sample]] <- all_means.Full; head(all_means.Full)
print("Done Filling Full data.frames")
} else {
print(paste0("No Columns itself found in sample: ",sample, " for interaction: ",CTuse))
Sys.sleep(0.3)
print("Using empty data.frame for Full")
all_pval.Full <- data.frame(A=as.numeric(),B=as.character()); colnames(all_pval.Full) <- c(paste0(CTuse,"|",gsub("Output_cpdb_","", sample)), "LR")
pval.list.ORI[[sample]] <- all_pval.Full
all_means.Full <- all_pval.Full
mean.list.ORI[[sample]] <- all_means.Full
}
}
print(paste0("Merging ",length(sampleNames), " data frames"))
### Both the options work
#all_pval_patient <- merge(merge(merge(pval.list[[1]], pval.list[[2]], by = "LR", all = TRUE),  pval.list[[3]], by = "LR", all = TRUE), pval.list[[4]], by = "LR", all = TRUE)
CombinedLRs <- Reduce(function(...) merge(..., by = "LR", all=TRUE), pval.list)
all_pval_patient <- Reduce(function(...) merge(..., by = "LR", all=TRUE), pval.list.ORI)
rownames(all_pval_patient) <- all_pval_patient$LR
all_pval_patient <- all_pval_patient[CombinedLRs$LR,]
#all_pval_patient1 <- Reduce(function(...) merge(..., all=TRUE), pval.list)
all_mean_patient <- Reduce(function(...) merge(..., by = "LR", all=TRUE), mean.list.ORI)
rownames(all_mean_patient) <- all_mean_patient$LR
all_mean_patient <- all_mean_patient[CombinedLRs$LR,]
rownames(all_pval_patient) <- all_pval_patient$LR; all_pval_patient$LR <- NULL; head(all_pval_patient,1)
selected_rows_pval <- rownames(all_pval_patient)
head(all_pval_patient,1); dim(all_pval_patient)
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
?heatmap.2
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
install_github("velocyto-team/velocyto.R")
install_github("velocyto-team/velocyto.R")
install.packages("RTools")
devtools::has_devel()
devtools::load_all()
install.packages("devtools")
install.packages("devtools")
