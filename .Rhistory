library(SCA)
load_Packages_SeuratAnalysis()
?load_Packages_SeuratAnalysis
rm(list=ls()) # clear workspace
rm(list=ls()) # clear workspace
library(Seurat)
library(DoubletFinder)
library(Matrix)
library(stringr)
library(useful)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(data.table)
library(cowplot)
library(plyr)
library(reshape2)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(colorspace)
library(splines)
library(AnnotationDbi)
library(dplyr)
library(gridBase)
library(ggrepel)
library(calibrate)
#library(futile.matrix)
library(SCA)
library(DoubletDecon)
library(devtools)
install_github("parveendabas/SCA")
rm(list=ls()) # clear workspace
library(devtools)
install_github("parveendabas/SCA")
library(SCA)
load_Packages_SeuratAnalysis()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch/Data_Input"
OutName <- "GBM_Batch2"
NameInpdf="GBM_Batch2"
GroupName="orig.ident"
## Paremeter that needed to changed based on projects
mincells = 3
mingenes = 500
mtpercent = 20
rbpercent = 50
featureForCCA=2000
CCAdimension=30
Sampleall.object=list()
sample.Names <- c("MYSC44", "MYSC45", "MYSC46", "MYSC47", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60")
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
i=1
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
dev.off()
dev.off()
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
rm(list=ls()) # clear workspace
ReInstallSCA="YES"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
}
library(SCA)
load_Packages_SeuratAnalysis()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch/Data_Input"
OutName <- "GBM_Batch2"
NameInpdf="GBM_Batch2"
GroupName="orig.ident"
## Paremeter that needed to changed based on projects
mincells = 3
mingenes = 500
mtpercent = 20
rbpercent = 50
featureForCCA=2000
CCAdimension=30
Sampleall.object=list()
sample.Names <- c("MYSC44", "MYSC45", "MYSC46", "MYSC47", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60")
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
i=1
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
rm(list=ls()) # clear workspace
ReInstallSCA="YES"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
}
library(SCA)
load_Packages_SeuratAnalysis()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch/Data_Input"
OutName <- "GBM_Batch2"
NameInpdf="GBM_Batch2"
GroupName="orig.ident"
## Paremeter that needed to changed based on projects
mincells = 3
mingenes = 500
mtpercent = 20
rbpercent = 50
featureForCCA=2000
CCAdimension=30
Sampleall.object=list()
sample.Names <- c("MYSC44", "MYSC45", "MYSC46", "MYSC47", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60")
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
i=1
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
dev.off()
dev.off()
rm(list=ls()) # clear workspace
ReInstallSCA="YES"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
}
library(SCA)
load_Packages_SeuratAnalysis()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch/Data_Input"
OutName <- "GBM_Batch2"
NameInpdf="GBM_Batch2"
GroupName="orig.ident"
## Paremeter that needed to changed based on projects
mincells = 3
mingenes = 500
mtpercent = 20
rbpercent = 50
featureForCCA=2000
CCAdimension=30
Sampleall.object=list()
sample.Names <- c("MYSC44", "MYSC45", "MYSC46", "MYSC47", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60")
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
i=1
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
?Create_Table
dev.off()
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
SeuratObject=SCdata
saveDIR=saveDIR
Sample=Sample
FeatureUseCount=2000
#library(DoubletDecon)
library(DoubletFinder)
PCAnum = 10
resClus = 0.5
ClusPallette = ClusPallette
DoubletFinder = TRUE
DoubletDecon = FALSE
#library(DoubletDecon)
library(DoubletFinder)
setwd(saveDIR)
DDdir <- paste(getwd(),paste0("Doublet_Detection_",Sample),sep="/"); print(DDdir)
dir.create(file.path(getwd(),paste0("Doublet_Detection_",Sample)), showWarnings = FALSE)
print(paste0("PrePorocessing data before running Doublet Detection Algorithms for: ",Sample))
RUNProcessData="YES"
if(RUNProcessData == "YES"){
setwd(DDdir)
pdf(file=paste0("PreProcess_Doublet_Detection_",Sample,"_using_PCA_",PCAnum,"_res_",resClus,".pdf"),height = 10,width = 12)
print(paste0("Loading Seurat object for: ",Sample))
## Pre-process Seurat object (standard) --------------------------------------------------------------------------------------
#SeuratObject <- NormalizeData(SeuratObject)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
if(Species=="hsa"){
print("Counting MT % for Human")
SeuratObject[["percent.mt"]] <- PercentageFeatureSet(SeuratObject, pattern = "^MT-")
SeuratObject[["percent.rb"]] <- PercentageFeatureSet(SeuratObject, pattern = "^RP[SL]")
} else {
print("Counting MT % for Mouse")
SeuratObject[["percent.mt"]] <- PercentageFeatureSet(SeuratObject, pattern = "^mt-")
SeuratObject[["percent.rb"]] <- PercentageFeatureSet(SeuratObject, pattern = "^Rp[sl]")
}
print("Finished Counting")
print(head(SeuratObject@meta.data))
# Visualize QC metrics as a violin plot
#p1 <- VlnPlot(SeuratObject, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols = ClusPallette, pt.size = 0.00, ncol = 1)
#print(p1)
#plot1 <- FeatureScatter(SeuratObject, feature1 = "nCount_RNA", feature2 = "percent.mt", cols = ClusPallette)
#plot2 <- FeatureScatter(SeuratObject, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols = ClusPallette)
#print(CombinePlots(plots = list(plot1, plot2)))
print("Skipped VlnPlot")
SeuratObject <- FindVariableFeatures(SeuratObject, selection.method = "vst", nfeatures = FeatureUseCount)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(SeuratObject), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(SeuratObject)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
print(CombinePlots(plots = list(plot1, plot2)))
SeuratObject <- ScaleData(SeuratObject)
SeuratObject <- RunPCA(SeuratObject)
print(ElbowPlot(SeuratObject))
print(ElbowPlot(SeuratObject, ndims = 50))
print(DimHeatmap(SeuratObject, dims = 1:12, cells = 500, balanced = TRUE))
## Clusters
SeuratObject <- FindNeighbors(SeuratObject, dims = 1:PCAnum)
SeuratObject <- FindClusters(SeuratObject, resolution = resClus)
Idents(object = SeuratObject) <- "seurat_clusters"
#print(VlnPlot(SeuratObject, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols = ClusPallette, pt.size = 0.01, ncol = 2))
print("Skipped VlnPlot")
SeuratObject <- RunUMAP(SeuratObject, dims = 1:PCAnum)
#print(DimPlot(SeuratObject, reduction = "umap", label=TRUE, label.size = 8, pt.size = 0.5, cols = ClusPallette) + ggtitle(paste0(Sample, " (",nrow(SeuratObject@meta.data)," cells)")))
dev.off()
print("Skipped DimPlot")
}
Species="hsa"
PCAnum = 10
resClus = 0.5
ClusPallette = ClusPallette
DoubletFinder = TRUE
DoubletDecon = FALSE
print(paste0("PrePorocessing data before running Doublet Detection Algorithms for: ",Sample))
dev.off()
dev.off()
print(paste0("PrePorocessing data before running Doublet Detection Algorithms for: ",Sample))
RUNProcessData="YES"
if(RUNProcessData == "YES"){
setwd(DDdir)
pdf(file=paste0("PreProcess_Doublet_Detection_",Sample,"_using_PCA_",PCAnum,"_res_",resClus,".pdf"),height = 10,width = 12)
print(paste0("Loading Seurat object for: ",Sample))
## Pre-process Seurat object (standard) --------------------------------------------------------------------------------------
#SeuratObject <- NormalizeData(SeuratObject)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
if(Species=="hsa"){
print("Counting MT % for Human")
SeuratObject[["percent.mt"]] <- PercentageFeatureSet(SeuratObject, pattern = "^MT-")
SeuratObject[["percent.rb"]] <- PercentageFeatureSet(SeuratObject, pattern = "^RP[SL]")
} else {
print("Counting MT % for Mouse")
SeuratObject[["percent.mt"]] <- PercentageFeatureSet(SeuratObject, pattern = "^mt-")
SeuratObject[["percent.rb"]] <- PercentageFeatureSet(SeuratObject, pattern = "^Rp[sl]")
}
print("Finished Counting")
print(head(SeuratObject@meta.data))
# Visualize QC metrics as a violin plot
#p1 <- VlnPlot(SeuratObject, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols = ClusPallette, pt.size = 0.00, ncol = 1)
#print(p1)
#plot1 <- FeatureScatter(SeuratObject, feature1 = "nCount_RNA", feature2 = "percent.mt", cols = ClusPallette)
#plot2 <- FeatureScatter(SeuratObject, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols = ClusPallette)
#print(CombinePlots(plots = list(plot1, plot2)))
print("Skipped VlnPlot")
SeuratObject <- FindVariableFeatures(SeuratObject, selection.method = "vst", nfeatures = FeatureUseCount)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(SeuratObject), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(SeuratObject)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
print(CombinePlots(plots = list(plot1, plot2)))
SeuratObject <- ScaleData(SeuratObject)
SeuratObject <- RunPCA(SeuratObject)
print(ElbowPlot(SeuratObject))
print(ElbowPlot(SeuratObject, ndims = 50))
print(DimHeatmap(SeuratObject, dims = 1:12, cells = 500, balanced = TRUE))
## Clusters
SeuratObject <- FindNeighbors(SeuratObject, dims = 1:PCAnum)
SeuratObject <- FindClusters(SeuratObject, resolution = resClus)
Idents(object = SeuratObject) <- "seurat_clusters"
#print(VlnPlot(SeuratObject, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols = ClusPallette, pt.size = 0.01, ncol = 2))
print("Skipped VlnPlot")
SeuratObject <- RunUMAP(SeuratObject, dims = 1:PCAnum)
#print(DimPlot(SeuratObject, reduction = "umap", label=TRUE, label.size = 8, pt.size = 0.5, cols = ClusPallette) + ggtitle(paste0(Sample, " (",nrow(SeuratObject@meta.data)," cells)")))
dev.off()
print("Skipped DimPlot")
}
if (DoubletFinder == TRUE) {
setwd(DDdir)
DoubletFinderDir <- paste(getwd(),paste0("DoubletFinder_",Sample),sep="/"); print(DoubletFinderDir)
dir.create(file.path(getwd(),paste0("DoubletFinder_",Sample)), showWarnings = FALSE)
setwd(DoubletFinderDir)
pdf(file=paste0("Plots_DoubletFinder_",Sample,"_using_PCA_",PCAnum,"_res_",resClus,".pdf"),height = 10,width = 12)
print(paste0("Started DoubletFinder process for ",Sample, " using PCA ",PCAnum))
## pK Identification (no ground-truth) ---------------------------------------------------------------------------------------
sweep.res.list_SeuratObject <- paramSweep_v3(SeuratObject, PCs = 1:PCAnum, sct = FALSE)
sweep.stats_SeuratObject <- summarizeSweep(sweep.res.list_SeuratObject, GT = FALSE)
bcmvn_SeuratObject <- find.pK(sweep.stats_SeuratObject)
## Homotypic Doublet Proportion Estimate -------------------------------------------------------------------------------------
homotypic.prop <- modelHomotypic(SeuratObject$seurat_clusters)           ## ex: annotations <- SeuratObject@meta.data$ClusteringResults
nExp_poi <- round(0.075*length(colnames(x = SeuratObject))); nExp_poi  ## Assuming 7.5% doublet formation rate - tailor for your dataset
nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop)); nExp_poi.adj
print("Finished Doublet Finder steps")
## Run DoubletFinder with varying classification stringencies ----------------------------------------------------------------
SeuratObject <- doubletFinder_v3(SeuratObject, PCs = 1:PCAnum, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
head(SeuratObject@meta.data)
colnames(SeuratObject@meta.data)[colnames(SeuratObject@meta.data) %like% 'pANN_'] <- "pANNcomputed"
colnames(SeuratObject@meta.data)[colnames(SeuratObject@meta.data) %like% 'DF.classifications_'] <- "Doublet_LowConf"
head(SeuratObject@meta.data)
SeuratObject <- doubletFinder_v3(SeuratObject, PCs = 1:PCAnum, pN = 0.25, pK = 0.09, nExp = nExp_poi.adj, reuse.pANN = "pANNcomputed", sct = FALSE)
head(SeuratObject@meta.data)
colnames(SeuratObject@meta.data)[colnames(SeuratObject@meta.data) %like% 'DF.classifications_'] <- "Doublet_HighConf"
head(SeuratObject@meta.data)
table(SeuratObject@meta.data$Doublet_LowConf)
table(SeuratObject@meta.data$Doublet_HighConf)
table(SeuratObject@meta.data$Doublet_LowConf, SeuratObject@meta.data$Doublet_HighConf)
SeuratObject@meta.data$DoubletFinder <- SeuratObject@meta.data$Doublet_LowConf
SeuratObject@meta.data[SeuratObject@meta.data$Doublet_LowConf == "Doublet", "DoubletFinder"] <- "Doublet_LowConf"
table(SeuratObject@meta.data$DoubletFinder)
SeuratObject@meta.data[SeuratObject@meta.data$Doublet_HighConf == "Doublet", "DoubletFinder"] <- "Doublet_HighConf"
print(table(SeuratObject@meta.data$DoubletFinder))
head(SeuratObject@meta.data)
cutoff.df <- data.frame(Doublets = table(SeuratObject@meta.data$DoubletFinder)); print(cutoff.df)
TableDF <- cutoff.df
FontsDF <- c(2.5,2.5,2.5)
titleDF <- paste0(Sample,": Doublets Detected")
func.PlotTable.General(TableDF, FontsDF, titleDF, 20)
print(Create_Table(SeuratObject, BeforeFilter=0))
print("Plotted Table")
#p1 <- DimPlot(object = SeuratObject, reduction = "umap", group.by = "seurat_clusters", label = TRUE, repel = TRUE, cols = ClusPallette)
#p2 <- DimPlot(object = SeuratObject, reduction = "umap", group.by = "DoubletFinder", pt.size=1.5, cols=c("red", "dodgerblue", "black"))
#print(plot_grid(p1, p2, NULL))
dev.off()
write.table(SeuratObject@meta.data,file=paste0("Doublets_Detected_",Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt"),quote=F,sep="\t")
DoubletCells <- SeuratObject@meta.data[SeuratObject@meta.data$DoubletFinder != "Singlet",]; dim(DoubletCells)
head(DoubletCells)
write.table(DoubletCells,file=paste0("Discarded_Cells_",OutName,Sample,"_using_PCA_",PCAnum,"_res_",resClus,".txt"),quote=F,sep="\t")
}
head(SeuratObject@meta.data)
cutoff.df <- data.frame(Doublets = table(SeuratObject@meta.data$DoubletFinder)); print(cutoff.df)
head(SeuratObject@meta.data)
TableDF <- cutoff.df
FontsDF <- c(2.5,2.5,2.5)
titleDF <- paste0(Sample,": Doublets Detected")
func.PlotTable.General(TableDF, FontsDF, titleDF, 20)
print(Create_Table(SeuratObject, BeforeFilter=0))
dev.off()
dev.off()
rm(list=ls()) # clear workspace
ReInstallSCA="YES"
if(ReInstallSCA=="YES"){
print("Re-Installing SCA from github")
detach(package:SCA)
library(devtools)
install_github("parveendabas/SCA")
}
library(SCA)
load_Packages_SeuratAnalysis()
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Functions_Use_Any_Script.R")
source("/Users/kumarpa/Desktop/Work/Jax/Scripts/Scripts_Kyuson/Functions_Kyuson_Project.R")
pkWD <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch"
DataDir <- "/Users/kumarpa/Desktop/Work/Jax/Kyuson/GBM_New_Batch/Data_Input"
OutName <- "GBM_Batch2"
NameInpdf="GBM_Batch2"
GroupName="orig.ident"
## Paremeter that needed to changed based on projects
mincells = 3
mingenes = 500
mtpercent = 20
rbpercent = 50
featureForCCA=2000
CCAdimension=30
Sampleall.object=list()
sample.Names <- c("MYSC44", "MYSC45", "MYSC46", "MYSC47", "MYSC48", "MYSC49", "MYSC50", "MYSC51", "MYSC52", "MYSC53", "MYSC54", "MYSC55", "MYSC56", "MYSC57", "MYSC58", "MYSC59", "MYSC60")
## Auto Parameters
setwd(pkWD)
DoubletDIR <- paste0(pkWD,"/DoubletFinder"); DoubletDIR
dir.create(file.path(pkWD,paste0("/DoubletFinder")), showWarnings = FALSE)
Sampleall.object=list()
i=1
Sample <- sample.Names[i]; Sample
print(paste0("Processing Sample ",i,": ",Sample, " of total ",length(sample.Names)))
matrix.DIR <- paste0(DataDir,"/",Sample,"/filtered_feature_bc_matrix"); matrix.DIR
#/Users/kumarpa/Desktop/Work/Jax/Ewelina/Data_For_Analysis/Data_Input/WT_BL6_NonIR_B1/Doublet_Detection_WT_BL6_NonIR_B1
Doublet.DIR <- paste0(DataDir,"/",Sample,"/Doublet_Detection_",Sample); Doublet.DIR
saveDIR <- paste0(DataDir,"/",Sample); saveDIR
print(paste0("Running Basic QC step ",Sample))
SCdata <- Read10X_Norm(matrix.DIR, saveDIR, Sample, FeatureUseCount = 2000, save = FALSE)
print(paste0("Running Doublet Detection for ",Sample))
Doublet_Detection_DF(SCdata, saveDIR, Sample, FeatureUseCount = 2000, PCAnum = 10)
rm(list=ls()) # clear workspace
## https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
SCApackagedir <- "/Users/kumarpa/Desktop/Work/Jax/GitHub/"
setwd(SCApackagedir)
#create("SCA")
setwd("./SCA")
WhenMakingSCA="YES"
if(WhenMakingSCA=="YES"){
document()
#rm(list = c("cat_function"))
}
WhenReInstallingSCA="NO"
if(WhenReInstallingSCA=="YES"){
setwd("..")
## Check if the functions are added or not
install("SCA")
}
WhenCheckingSCA="YES"
if(WhenCheckingSCA=="YES"){
library(SCA)
?load_Packages_SeuratAnalysis
}
